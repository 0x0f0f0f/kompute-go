/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

// source: kompute.i

#define SWIGMODULE kompute

#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>



typedef long long intgo;
typedef unsigned long long uintgo;


# if !defined(__clang__) && (defined(__i386__) || defined(__x86_64__))
#   define SWIGSTRUCTPACKED __attribute__((__packed__, __gcc_struct__))
# else
#   define SWIGSTRUCTPACKED __attribute__((__packed__))
# endif



typedef struct { char *p; intgo n; } _gostring_;
typedef struct { void* array; intgo len; intgo cap; } _goslice_;




#define swiggo_size_assert_eq(x, y, name) typedef char name[(x-y)*(x-y)*-2+1];
#define swiggo_size_assert(t, n) swiggo_size_assert_eq(sizeof(t), n, swiggo_sizeof_##t##_is_not_##n)

swiggo_size_assert(char, 1)
swiggo_size_assert(short, 2)
swiggo_size_assert(int, 4)
typedef long long swiggo_long_long;
swiggo_size_assert(swiggo_long_long, 8)
swiggo_size_assert(float, 4)
swiggo_size_assert(double, 8)

#ifdef __cplusplus
extern "C" {
#endif
extern void crosscall2(void (*fn)(void *, int), void *, int);
extern char* _cgo_topofstack(void) __attribute__ ((weak));
extern void _cgo_allocate(void *, int);
extern void _cgo_panic(void *, int);
#ifdef __cplusplus
}
#endif

static char *_swig_topofstack() {
  if (_cgo_topofstack) {
    return _cgo_topofstack();
  } else {
    return 0;
  }
}

static void _swig_gopanic(const char *p) {
  struct {
    const char *p;
  } SWIGSTRUCTPACKED a;
  a.p = p;
  crosscall2(_cgo_panic, &a, (int) sizeof a);
}




#define SWIG_contract_assert(expr, msg) \
  if (!(expr)) { _swig_gopanic(msg); } else


static void Swig_free(void* p) {
  free(p);
}

static void* Swig_malloc(int c) {
  return malloc(c);
}


#include <kompute/Kompute.hpp>


#include <string>


#include <vector>
#include <stdexcept>

SWIGINTERN std::vector< float >::const_reference std_vector_Sl_float_Sg__get(std::vector< float > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_float_Sg__set(std::vector< float > *self,int i,std::vector< float >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< char >::const_reference std_vector_Sl_char_Sg__get(std::vector< char > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_char_Sg__set(std::vector< char > *self,int i,std::vector< char >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
#ifdef __cplusplus
extern "C" {
#endif

void _wrap_Swig_free_kompute_209ca5717ea3ce19(void *_swig_go_0) {
  void *arg1 = (void *) 0 ;
  
  arg1 = *(void **)&_swig_go_0; 
  
  Swig_free(arg1);
  
}


void *_wrap_Swig_malloc_kompute_209ca5717ea3ce19(intgo _swig_go_0) {
  int arg1 ;
  void *result = 0 ;
  void *_swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  
  result = (void *)Swig_malloc(arg1);
  *(void **)&_swig_go_result = (void *)result; 
  return _swig_go_result;
}


std::vector< float > *_wrap_new_FloatVector__SWIG_0_kompute_209ca5717ea3ce19() {
  std::vector< float > *result = 0 ;
  std::vector< float > *_swig_go_result;
  
  
  result = (std::vector< float > *)new std::vector< float >();
  *(std::vector< float > **)&_swig_go_result = (std::vector< float > *)result; 
  return _swig_go_result;
}


std::vector< float > *_wrap_new_FloatVector__SWIG_1_kompute_209ca5717ea3ce19(long long _swig_go_0) {
  std::vector< float >::size_type arg1 ;
  std::vector< float > *result = 0 ;
  std::vector< float > *_swig_go_result;
  
  arg1 = (size_t)_swig_go_0; 
  
  result = (std::vector< float > *)new std::vector< float >(arg1);
  *(std::vector< float > **)&_swig_go_result = (std::vector< float > *)result; 
  return _swig_go_result;
}


std::vector< float > *_wrap_new_FloatVector__SWIG_2_kompute_209ca5717ea3ce19(std::vector< float > *_swig_go_0) {
  std::vector< float > *arg1 = 0 ;
  std::vector< float > *result = 0 ;
  std::vector< float > *_swig_go_result;
  
  arg1 = *(std::vector< float > **)&_swig_go_0; 
  
  result = (std::vector< float > *)new std::vector< float >((std::vector< float > const &)*arg1);
  *(std::vector< float > **)&_swig_go_result = (std::vector< float > *)result; 
  return _swig_go_result;
}


long long _wrap_FloatVector_size_kompute_209ca5717ea3ce19(std::vector< float > *_swig_go_0) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< float > **)&_swig_go_0; 
  
  result = ((std::vector< float > const *)arg1)->size();
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_FloatVector_capacity_kompute_209ca5717ea3ce19(std::vector< float > *_swig_go_0) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< float > **)&_swig_go_0; 
  
  result = ((std::vector< float > const *)arg1)->capacity();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_FloatVector_reserve_kompute_209ca5717ea3ce19(std::vector< float > *_swig_go_0, long long _swig_go_1) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::size_type arg2 ;
  
  arg1 = *(std::vector< float > **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  (arg1)->reserve(arg2);
  
}


bool _wrap_FloatVector_isEmpty_kompute_209ca5717ea3ce19(std::vector< float > *_swig_go_0) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(std::vector< float > **)&_swig_go_0; 
  
  result = (bool)((std::vector< float > const *)arg1)->empty();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_FloatVector_clear_kompute_209ca5717ea3ce19(std::vector< float > *_swig_go_0) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  
  arg1 = *(std::vector< float > **)&_swig_go_0; 
  
  (arg1)->clear();
  
}


void _wrap_FloatVector_add_kompute_209ca5717ea3ce19(std::vector< float > *_swig_go_0, float _swig_go_1) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::value_type *arg2 = 0 ;
  
  arg1 = *(std::vector< float > **)&_swig_go_0; 
  arg2 = (std::vector< float >::value_type *)&_swig_go_1; 
  
  (arg1)->push_back((std::vector< float >::value_type const &)*arg2);
  
}


float _wrap_FloatVector_get_kompute_209ca5717ea3ce19(std::vector< float > *_swig_go_0, intgo _swig_go_1) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  int arg2 ;
  std::vector< float >::value_type *result = 0 ;
  float _swig_go_result;
  
  arg1 = *(std::vector< float > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  try {
    result = (std::vector< float >::value_type *) &std_vector_Sl_float_Sg__get(arg1,arg2);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  _swig_go_result = (float)*result; 
  return _swig_go_result;
}


void _wrap_FloatVector_set_kompute_209ca5717ea3ce19(std::vector< float > *_swig_go_0, intgo _swig_go_1, float _swig_go_2) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  int arg2 ;
  std::vector< float >::value_type *arg3 = 0 ;
  
  arg1 = *(std::vector< float > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = (std::vector< float >::value_type *)&_swig_go_2; 
  
  try {
    std_vector_Sl_float_Sg__set(arg1,arg2,(float const &)*arg3);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  
}


void _wrap_delete_FloatVector_kompute_209ca5717ea3ce19(std::vector< float > *_swig_go_0) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  
  arg1 = *(std::vector< float > **)&_swig_go_0; 
  
  delete arg1;
  
}


std::vector< char > *_wrap_new_ByteVector__SWIG_0_kompute_209ca5717ea3ce19() {
  std::vector< char > *result = 0 ;
  std::vector< char > *_swig_go_result;
  
  
  result = (std::vector< char > *)new std::vector< char >();
  *(std::vector< char > **)&_swig_go_result = (std::vector< char > *)result; 
  return _swig_go_result;
}


std::vector< char > *_wrap_new_ByteVector__SWIG_1_kompute_209ca5717ea3ce19(long long _swig_go_0) {
  std::vector< char >::size_type arg1 ;
  std::vector< char > *result = 0 ;
  std::vector< char > *_swig_go_result;
  
  arg1 = (size_t)_swig_go_0; 
  
  result = (std::vector< char > *)new std::vector< char >(arg1);
  *(std::vector< char > **)&_swig_go_result = (std::vector< char > *)result; 
  return _swig_go_result;
}


std::vector< char > *_wrap_new_ByteVector__SWIG_2_kompute_209ca5717ea3ce19(std::vector< char > *_swig_go_0) {
  std::vector< char > *arg1 = 0 ;
  std::vector< char > *result = 0 ;
  std::vector< char > *_swig_go_result;
  
  arg1 = *(std::vector< char > **)&_swig_go_0; 
  
  result = (std::vector< char > *)new std::vector< char >((std::vector< char > const &)*arg1);
  *(std::vector< char > **)&_swig_go_result = (std::vector< char > *)result; 
  return _swig_go_result;
}


long long _wrap_ByteVector_size_kompute_209ca5717ea3ce19(std::vector< char > *_swig_go_0) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< char > **)&_swig_go_0; 
  
  result = ((std::vector< char > const *)arg1)->size();
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_ByteVector_capacity_kompute_209ca5717ea3ce19(std::vector< char > *_swig_go_0) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< char > **)&_swig_go_0; 
  
  result = ((std::vector< char > const *)arg1)->capacity();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_ByteVector_reserve_kompute_209ca5717ea3ce19(std::vector< char > *_swig_go_0, long long _swig_go_1) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char >::size_type arg2 ;
  
  arg1 = *(std::vector< char > **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  (arg1)->reserve(arg2);
  
}


bool _wrap_ByteVector_isEmpty_kompute_209ca5717ea3ce19(std::vector< char > *_swig_go_0) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(std::vector< char > **)&_swig_go_0; 
  
  result = (bool)((std::vector< char > const *)arg1)->empty();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_ByteVector_clear_kompute_209ca5717ea3ce19(std::vector< char > *_swig_go_0) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  
  arg1 = *(std::vector< char > **)&_swig_go_0; 
  
  (arg1)->clear();
  
}


void _wrap_ByteVector_add_kompute_209ca5717ea3ce19(std::vector< char > *_swig_go_0, char _swig_go_1) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char >::value_type *arg2 = 0 ;
  
  arg1 = *(std::vector< char > **)&_swig_go_0; 
  arg2 = (std::vector< char >::value_type *)&_swig_go_1; 
  
  (arg1)->push_back((std::vector< char >::value_type const &)*arg2);
  
}


char _wrap_ByteVector_get_kompute_209ca5717ea3ce19(std::vector< char > *_swig_go_0, intgo _swig_go_1) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  int arg2 ;
  std::vector< char >::value_type *result = 0 ;
  char _swig_go_result;
  
  arg1 = *(std::vector< char > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  try {
    result = (std::vector< char >::value_type *) &std_vector_Sl_char_Sg__get(arg1,arg2);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  _swig_go_result = (char)*result; 
  return _swig_go_result;
}


void _wrap_ByteVector_set_kompute_209ca5717ea3ce19(std::vector< char > *_swig_go_0, intgo _swig_go_1, char _swig_go_2) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  int arg2 ;
  std::vector< char >::value_type *arg3 = 0 ;
  
  arg1 = *(std::vector< char > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = (std::vector< char >::value_type *)&_swig_go_2; 
  
  try {
    std_vector_Sl_char_Sg__set(arg1,arg2,(char const &)*arg3);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  
}


void _wrap_delete_ByteVector_kompute_209ca5717ea3ce19(std::vector< char > *_swig_go_0) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  
  arg1 = *(std::vector< char > **)&_swig_go_0; 
  
  delete arg1;
  
}


char *_wrap_shaders_glsl_opmult_comp_spv_get_kompute_209ca5717ea3ce19() {
  unsigned char *result = 0 ;
  char *_swig_go_result;
  
  
  result = (unsigned char *)(unsigned char *)kp::shader_data::shaders_glsl_opmult_comp_spv;
  *(unsigned char **)&_swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_shaders_glsl_opmult_comp_spv_len_get_kompute_209ca5717ea3ce19() {
  unsigned int result;
  intgo _swig_go_result;
  
  
  result = (unsigned int)(unsigned int)kp::shader_data::shaders_glsl_opmult_comp_spv_len;
  _swig_go_result = result; 
  return _swig_go_result;
}


char *_wrap_shaders_glsl_logisticregression_comp_spv_get_kompute_209ca5717ea3ce19() {
  unsigned char *result = 0 ;
  char *_swig_go_result;
  
  
  result = (unsigned char *)(unsigned char *)kp::shader_data::shaders_glsl_logisticregression_comp_spv;
  *(unsigned char **)&_swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_shaders_glsl_logisticregression_comp_spv_len_get_kompute_209ca5717ea3ce19() {
  unsigned int result;
  intgo _swig_go_result;
  
  
  result = (unsigned int)(unsigned int)kp::shader_data::shaders_glsl_logisticregression_comp_spv_len;
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_TensorTypes_eDevice_Tensor_kompute_209ca5717ea3ce19() {
  kp::Tensor::TensorTypes result;
  intgo _swig_go_result;
  
  
  result = kp::Tensor::TensorTypes::eDevice;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_TensorTypes_eStaging_Tensor_kompute_209ca5717ea3ce19() {
  kp::Tensor::TensorTypes result;
  intgo _swig_go_result;
  
  
  result = kp::Tensor::TensorTypes::eStaging;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_TensorTypes_eStorage_Tensor_kompute_209ca5717ea3ce19() {
  kp::Tensor::TensorTypes result;
  intgo _swig_go_result;
  
  
  result = kp::Tensor::TensorTypes::eStorage;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


kp::Tensor *_wrap_new_Tensor__SWIG_0_kompute_209ca5717ea3ce19() {
  kp::Tensor *result = 0 ;
  kp::Tensor *_swig_go_result;
  
  
  result = (kp::Tensor *)new kp::Tensor();
  *(kp::Tensor **)&_swig_go_result = (kp::Tensor *)result; 
  return _swig_go_result;
}


kp::Tensor *_wrap_new_Tensor__SWIG_1_kompute_209ca5717ea3ce19(std::vector< float > *_swig_go_0, intgo _swig_go_1) {
  std::vector< float > *arg1 = 0 ;
  kp::Tensor::TensorTypes arg2 ;
  kp::Tensor *result = 0 ;
  kp::Tensor *_swig_go_result;
  
  arg1 = *(std::vector< float > **)&_swig_go_0; 
  arg2 = (kp::Tensor::TensorTypes)_swig_go_1; 
  
  result = (kp::Tensor *)new kp::Tensor((std::vector< float > const &)*arg1,arg2);
  *(kp::Tensor **)&_swig_go_result = (kp::Tensor *)result; 
  return _swig_go_result;
}


kp::Tensor *_wrap_new_Tensor__SWIG_2_kompute_209ca5717ea3ce19(std::vector< float > *_swig_go_0) {
  std::vector< float > *arg1 = 0 ;
  kp::Tensor *result = 0 ;
  kp::Tensor *_swig_go_result;
  
  arg1 = *(std::vector< float > **)&_swig_go_0; 
  
  result = (kp::Tensor *)new kp::Tensor((std::vector< float > const &)*arg1);
  *(kp::Tensor **)&_swig_go_result = (kp::Tensor *)result; 
  return _swig_go_result;
}


void _wrap_delete_Tensor_kompute_209ca5717ea3ce19(kp::Tensor *_swig_go_0) {
  kp::Tensor *arg1 = (kp::Tensor *) 0 ;
  
  arg1 = *(kp::Tensor **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_Tensor_init_kompute_209ca5717ea3ce19(kp::Tensor *_swig_go_0, std::shared_ptr< vk::PhysicalDevice > *_swig_go_1, std::shared_ptr< vk::Device > *_swig_go_2) {
  kp::Tensor *arg1 = (kp::Tensor *) 0 ;
  std::shared_ptr< vk::PhysicalDevice > arg2 ;
  std::shared_ptr< vk::Device > arg3 ;
  std::shared_ptr< vk::PhysicalDevice > *argp2 ;
  std::shared_ptr< vk::Device > *argp3 ;
  
  arg1 = *(kp::Tensor **)&_swig_go_0; 
  
  argp2 = (std::shared_ptr< vk::PhysicalDevice > *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null std::shared_ptr< vk::PhysicalDevice >");
  }
  arg2 = (std::shared_ptr< vk::PhysicalDevice >)*argp2;
  
  
  argp3 = (std::shared_ptr< vk::Device > *)_swig_go_2;
  if (argp3 == NULL) {
    _swig_gopanic("Attempt to dereference null std::shared_ptr< vk::Device >");
  }
  arg3 = (std::shared_ptr< vk::Device >)*argp3;
  
  
  (arg1)->init(arg2,arg3);
  
}


void _wrap_Tensor_freeMemoryDestroyGPUResources_kompute_209ca5717ea3ce19(kp::Tensor *_swig_go_0) {
  kp::Tensor *arg1 = (kp::Tensor *) 0 ;
  
  arg1 = *(kp::Tensor **)&_swig_go_0; 
  
  (arg1)->freeMemoryDestroyGPUResources();
  
}


std::vector< float > *_wrap_Tensor_data_kompute_209ca5717ea3ce19(kp::Tensor *_swig_go_0) {
  kp::Tensor *arg1 = (kp::Tensor *) 0 ;
  std::vector< float > *result = 0 ;
  std::vector< float > *_swig_go_result;
  
  arg1 = *(kp::Tensor **)&_swig_go_0; 
  
  result = (std::vector< float > *) &(arg1)->data();
  *(std::vector< float > **)&_swig_go_result = result; 
  return _swig_go_result;
}


uint32_t *_wrap_Tensor_size_kompute_209ca5717ea3ce19(kp::Tensor *_swig_go_0) {
  kp::Tensor *arg1 = (kp::Tensor *) 0 ;
  uint32_t result;
  uint32_t *_swig_go_result;
  
  arg1 = *(kp::Tensor **)&_swig_go_0; 
  
  result = (arg1)->size();
  *(uint32_t **)&_swig_go_result = new uint32_t(result); 
  return _swig_go_result;
}


std::array< uint32_t,1 > *_wrap_Tensor_shape_kompute_209ca5717ea3ce19(kp::Tensor *_swig_go_0) {
  kp::Tensor *arg1 = (kp::Tensor *) 0 ;
  std::array< uint32_t,1 > result;
  std::array< uint32_t,1 > *_swig_go_result;
  
  arg1 = *(kp::Tensor **)&_swig_go_0; 
  
  result = (arg1)->shape();
  *(std::array< uint32_t,1 > **)&_swig_go_result = new std::array< uint32_t,1 >(result); 
  return _swig_go_result;
}


intgo _wrap_Tensor_tensorType_kompute_209ca5717ea3ce19(kp::Tensor *_swig_go_0) {
  kp::Tensor *arg1 = (kp::Tensor *) 0 ;
  kp::Tensor::TensorTypes result;
  intgo _swig_go_result;
  
  arg1 = *(kp::Tensor **)&_swig_go_0; 
  
  result = (kp::Tensor::TensorTypes)(arg1)->tensorType();
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


bool _wrap_Tensor_isInit_kompute_209ca5717ea3ce19(kp::Tensor *_swig_go_0) {
  kp::Tensor *arg1 = (kp::Tensor *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(kp::Tensor **)&_swig_go_0; 
  
  result = (bool)(arg1)->isInit();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_Tensor_setData_kompute_209ca5717ea3ce19(kp::Tensor *_swig_go_0, std::vector< float > *_swig_go_1) {
  kp::Tensor *arg1 = (kp::Tensor *) 0 ;
  std::vector< float > *arg2 = 0 ;
  
  arg1 = *(kp::Tensor **)&_swig_go_0; 
  arg2 = *(std::vector< float > **)&_swig_go_1; 
  
  (arg1)->setData((std::vector< float > const &)*arg2);
  
}


void _wrap_Tensor_recordCopyFrom_kompute_209ca5717ea3ce19(kp::Tensor *_swig_go_0, std::shared_ptr< vk::CommandBuffer > *_swig_go_1, std::shared_ptr< kp::Tensor > *_swig_go_2, bool _swig_go_3) {
  kp::Tensor *arg1 = (kp::Tensor *) 0 ;
  std::shared_ptr< vk::CommandBuffer > arg2 ;
  SwigValueWrapper< std::shared_ptr< kp::Tensor > > arg3 ;
  bool arg4 ;
  std::shared_ptr< vk::CommandBuffer > *argp2 ;
  std::shared_ptr< kp::Tensor > *argp3 ;
  
  arg1 = *(kp::Tensor **)&_swig_go_0; 
  
  argp2 = (std::shared_ptr< vk::CommandBuffer > *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null std::shared_ptr< vk::CommandBuffer >");
  }
  arg2 = (std::shared_ptr< vk::CommandBuffer >)*argp2;
  
  
  argp3 = (std::shared_ptr< kp::Tensor > *)_swig_go_2;
  if (argp3 == NULL) {
    _swig_gopanic("Attempt to dereference null std::shared_ptr< kp::Tensor >");
  }
  arg3 = (std::shared_ptr< kp::Tensor >)*argp3;
  
  arg4 = (bool)_swig_go_3; 
  
  (arg1)->recordCopyFrom(arg2,arg3,arg4);
  
}


void _wrap_Tensor_recordBufferMemoryBarrier_kompute_209ca5717ea3ce19(kp::Tensor *_swig_go_0, std::shared_ptr< vk::CommandBuffer > *_swig_go_1, vk::AccessFlagBits *_swig_go_2, vk::AccessFlagBits *_swig_go_3, vk::PipelineStageFlagBits *_swig_go_4, vk::PipelineStageFlagBits *_swig_go_5) {
  kp::Tensor *arg1 = (kp::Tensor *) 0 ;
  std::shared_ptr< vk::CommandBuffer > arg2 ;
  vk::AccessFlagBits arg3 ;
  vk::AccessFlagBits arg4 ;
  vk::PipelineStageFlagBits arg5 ;
  vk::PipelineStageFlagBits arg6 ;
  std::shared_ptr< vk::CommandBuffer > *argp2 ;
  vk::AccessFlagBits *argp3 ;
  vk::AccessFlagBits *argp4 ;
  vk::PipelineStageFlagBits *argp5 ;
  vk::PipelineStageFlagBits *argp6 ;
  
  arg1 = *(kp::Tensor **)&_swig_go_0; 
  
  argp2 = (std::shared_ptr< vk::CommandBuffer > *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null std::shared_ptr< vk::CommandBuffer >");
  }
  arg2 = (std::shared_ptr< vk::CommandBuffer >)*argp2;
  
  
  argp3 = (vk::AccessFlagBits *)_swig_go_2;
  if (argp3 == NULL) {
    _swig_gopanic("Attempt to dereference null vk::AccessFlagBits");
  }
  arg3 = (vk::AccessFlagBits)*argp3;
  
  
  argp4 = (vk::AccessFlagBits *)_swig_go_3;
  if (argp4 == NULL) {
    _swig_gopanic("Attempt to dereference null vk::AccessFlagBits");
  }
  arg4 = (vk::AccessFlagBits)*argp4;
  
  
  argp5 = (vk::PipelineStageFlagBits *)_swig_go_4;
  if (argp5 == NULL) {
    _swig_gopanic("Attempt to dereference null vk::PipelineStageFlagBits");
  }
  arg5 = (vk::PipelineStageFlagBits)*argp5;
  
  
  argp6 = (vk::PipelineStageFlagBits *)_swig_go_5;
  if (argp6 == NULL) {
    _swig_gopanic("Attempt to dereference null vk::PipelineStageFlagBits");
  }
  arg6 = (vk::PipelineStageFlagBits)*argp6;
  
  
  (arg1)->recordBufferMemoryBarrier(arg2,arg3,arg4,arg5,arg6);
  
}


vk::DescriptorBufferInfo *_wrap_Tensor_constructDescriptorBufferInfo_kompute_209ca5717ea3ce19(kp::Tensor *_swig_go_0) {
  kp::Tensor *arg1 = (kp::Tensor *) 0 ;
  vk::DescriptorBufferInfo result;
  vk::DescriptorBufferInfo *_swig_go_result;
  
  arg1 = *(kp::Tensor **)&_swig_go_0; 
  
  result = (arg1)->constructDescriptorBufferInfo();
  *(vk::DescriptorBufferInfo **)&_swig_go_result = new vk::DescriptorBufferInfo(result); 
  return _swig_go_result;
}


void _wrap_Tensor_mapDataFromHostMemory_kompute_209ca5717ea3ce19(kp::Tensor *_swig_go_0) {
  kp::Tensor *arg1 = (kp::Tensor *) 0 ;
  
  arg1 = *(kp::Tensor **)&_swig_go_0; 
  
  (arg1)->mapDataFromHostMemory();
  
}


void _wrap_Tensor_mapDataIntoHostMemory_kompute_209ca5717ea3ce19(kp::Tensor *_swig_go_0) {
  kp::Tensor *arg1 = (kp::Tensor *) 0 ;
  
  arg1 = *(kp::Tensor **)&_swig_go_0; 
  
  (arg1)->mapDataIntoHostMemory();
  
}


void _wrap_delete_OpBase_kompute_209ca5717ea3ce19(kp::OpBase *_swig_go_0) {
  kp::OpBase *arg1 = (kp::OpBase *) 0 ;
  
  arg1 = *(kp::OpBase **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_OpBase_init_kompute_209ca5717ea3ce19(kp::OpBase *_swig_go_0) {
  kp::OpBase *arg1 = (kp::OpBase *) 0 ;
  
  arg1 = *(kp::OpBase **)&_swig_go_0; 
  
  (arg1)->init();
  
}


void _wrap_OpBase_record_kompute_209ca5717ea3ce19(kp::OpBase *_swig_go_0) {
  kp::OpBase *arg1 = (kp::OpBase *) 0 ;
  
  arg1 = *(kp::OpBase **)&_swig_go_0; 
  
  (arg1)->record();
  
}


void _wrap_OpBase_preEval_kompute_209ca5717ea3ce19(kp::OpBase *_swig_go_0) {
  kp::OpBase *arg1 = (kp::OpBase *) 0 ;
  
  arg1 = *(kp::OpBase **)&_swig_go_0; 
  
  (arg1)->preEval();
  
}


void _wrap_OpBase_postEval_kompute_209ca5717ea3ce19(kp::OpBase *_swig_go_0) {
  kp::OpBase *arg1 = (kp::OpBase *) 0 ;
  
  arg1 = *(kp::OpBase **)&_swig_go_0; 
  
  (arg1)->postEval();
  
}


kp::Sequence *_wrap_new_Sequence__SWIG_0_kompute_209ca5717ea3ce19() {
  kp::Sequence *result = 0 ;
  kp::Sequence *_swig_go_result;
  
  
  result = (kp::Sequence *)new kp::Sequence();
  *(kp::Sequence **)&_swig_go_result = (kp::Sequence *)result; 
  return _swig_go_result;
}


kp::Sequence *_wrap_new_Sequence__SWIG_1_kompute_209ca5717ea3ce19(std::shared_ptr< vk::PhysicalDevice > *_swig_go_0, std::shared_ptr< vk::Device > *_swig_go_1, std::shared_ptr< vk::Queue > *_swig_go_2, uint32_t *_swig_go_3) {
  std::shared_ptr< vk::PhysicalDevice > arg1 ;
  std::shared_ptr< vk::Device > arg2 ;
  std::shared_ptr< vk::Queue > arg3 ;
  uint32_t arg4 ;
  std::shared_ptr< vk::PhysicalDevice > *argp1 ;
  std::shared_ptr< vk::Device > *argp2 ;
  std::shared_ptr< vk::Queue > *argp3 ;
  uint32_t *argp4 ;
  kp::Sequence *result = 0 ;
  kp::Sequence *_swig_go_result;
  
  
  argp1 = (std::shared_ptr< vk::PhysicalDevice > *)_swig_go_0;
  if (argp1 == NULL) {
    _swig_gopanic("Attempt to dereference null std::shared_ptr< vk::PhysicalDevice >");
  }
  arg1 = (std::shared_ptr< vk::PhysicalDevice >)*argp1;
  
  
  argp2 = (std::shared_ptr< vk::Device > *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null std::shared_ptr< vk::Device >");
  }
  arg2 = (std::shared_ptr< vk::Device >)*argp2;
  
  
  argp3 = (std::shared_ptr< vk::Queue > *)_swig_go_2;
  if (argp3 == NULL) {
    _swig_gopanic("Attempt to dereference null std::shared_ptr< vk::Queue >");
  }
  arg3 = (std::shared_ptr< vk::Queue >)*argp3;
  
  
  argp4 = (uint32_t *)_swig_go_3;
  if (argp4 == NULL) {
    _swig_gopanic("Attempt to dereference null uint32_t");
  }
  arg4 = (uint32_t)*argp4;
  
  
  result = (kp::Sequence *)new kp::Sequence(arg1,arg2,arg3,arg4);
  *(kp::Sequence **)&_swig_go_result = (kp::Sequence *)result; 
  return _swig_go_result;
}


void _wrap_delete_Sequence_kompute_209ca5717ea3ce19(kp::Sequence *_swig_go_0) {
  kp::Sequence *arg1 = (kp::Sequence *) 0 ;
  
  arg1 = *(kp::Sequence **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_Sequence_init_kompute_209ca5717ea3ce19(kp::Sequence *_swig_go_0) {
  kp::Sequence *arg1 = (kp::Sequence *) 0 ;
  
  arg1 = *(kp::Sequence **)&_swig_go_0; 
  
  (arg1)->init();
  
}


bool _wrap_Sequence_begin_kompute_209ca5717ea3ce19(kp::Sequence *_swig_go_0) {
  kp::Sequence *arg1 = (kp::Sequence *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(kp::Sequence **)&_swig_go_0; 
  
  result = (bool)(arg1)->begin();
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_Sequence_end_kompute_209ca5717ea3ce19(kp::Sequence *_swig_go_0) {
  kp::Sequence *arg1 = (kp::Sequence *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(kp::Sequence **)&_swig_go_0; 
  
  result = (bool)(arg1)->end();
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_Sequence_eval_kompute_209ca5717ea3ce19(kp::Sequence *_swig_go_0) {
  kp::Sequence *arg1 = (kp::Sequence *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(kp::Sequence **)&_swig_go_0; 
  
  result = (bool)(arg1)->eval();
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_Sequence_evalAsync_kompute_209ca5717ea3ce19(kp::Sequence *_swig_go_0) {
  kp::Sequence *arg1 = (kp::Sequence *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(kp::Sequence **)&_swig_go_0; 
  
  result = (bool)(arg1)->evalAsync();
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_Sequence_evalAwait__SWIG_0_kompute_209ca5717ea3ce19(kp::Sequence *_swig_go_0, uint64_t *_swig_go_1) {
  kp::Sequence *arg1 = (kp::Sequence *) 0 ;
  uint64_t arg2 ;
  uint64_t *argp2 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(kp::Sequence **)&_swig_go_0; 
  
  argp2 = (uint64_t *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null uint64_t");
  }
  arg2 = (uint64_t)*argp2;
  
  
  result = (bool)(arg1)->evalAwait(arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_Sequence_evalAwait__SWIG_1_kompute_209ca5717ea3ce19(kp::Sequence *_swig_go_0) {
  kp::Sequence *arg1 = (kp::Sequence *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(kp::Sequence **)&_swig_go_0; 
  
  result = (bool)(arg1)->evalAwait();
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_Sequence_isRecording_kompute_209ca5717ea3ce19(kp::Sequence *_swig_go_0) {
  kp::Sequence *arg1 = (kp::Sequence *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(kp::Sequence **)&_swig_go_0; 
  
  result = (bool)(arg1)->isRecording();
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_Sequence_isRunning_kompute_209ca5717ea3ce19(kp::Sequence *_swig_go_0) {
  kp::Sequence *arg1 = (kp::Sequence *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(kp::Sequence **)&_swig_go_0; 
  
  result = (bool)(arg1)->isRunning();
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_Sequence_isInit_kompute_209ca5717ea3ce19(kp::Sequence *_swig_go_0) {
  kp::Sequence *arg1 = (kp::Sequence *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(kp::Sequence **)&_swig_go_0; 
  
  result = (bool)(arg1)->isInit();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_Sequence_freeMemoryDestroyGPUResources_kompute_209ca5717ea3ce19(kp::Sequence *_swig_go_0) {
  kp::Sequence *arg1 = (kp::Sequence *) 0 ;
  
  arg1 = *(kp::Sequence **)&_swig_go_0; 
  
  (arg1)->freeMemoryDestroyGPUResources();
  
}


kp::OpTensorCreate *_wrap_new_OpTensorCreate__SWIG_0_kompute_209ca5717ea3ce19() {
  kp::OpTensorCreate *result = 0 ;
  kp::OpTensorCreate *_swig_go_result;
  
  
  result = (kp::OpTensorCreate *)new kp::OpTensorCreate();
  *(kp::OpTensorCreate **)&_swig_go_result = (kp::OpTensorCreate *)result; 
  return _swig_go_result;
}


kp::OpTensorCreate *_wrap_new_OpTensorCreate__SWIG_1_kompute_209ca5717ea3ce19(std::shared_ptr< vk::PhysicalDevice > *_swig_go_0, std::shared_ptr< vk::Device > *_swig_go_1, std::shared_ptr< vk::CommandBuffer > *_swig_go_2, std::vector< std::shared_ptr< kp::Tensor > > *_swig_go_3) {
  std::shared_ptr< vk::PhysicalDevice > arg1 ;
  std::shared_ptr< vk::Device > arg2 ;
  std::shared_ptr< vk::CommandBuffer > arg3 ;
  SwigValueWrapper< std::vector< std::shared_ptr< kp::Tensor > > > arg4 ;
  std::shared_ptr< vk::PhysicalDevice > *argp1 ;
  std::shared_ptr< vk::Device > *argp2 ;
  std::shared_ptr< vk::CommandBuffer > *argp3 ;
  std::vector< std::shared_ptr< kp::Tensor > > *argp4 ;
  kp::OpTensorCreate *result = 0 ;
  kp::OpTensorCreate *_swig_go_result;
  
  
  argp1 = (std::shared_ptr< vk::PhysicalDevice > *)_swig_go_0;
  if (argp1 == NULL) {
    _swig_gopanic("Attempt to dereference null std::shared_ptr< vk::PhysicalDevice >");
  }
  arg1 = (std::shared_ptr< vk::PhysicalDevice >)*argp1;
  
  
  argp2 = (std::shared_ptr< vk::Device > *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null std::shared_ptr< vk::Device >");
  }
  arg2 = (std::shared_ptr< vk::Device >)*argp2;
  
  
  argp3 = (std::shared_ptr< vk::CommandBuffer > *)_swig_go_2;
  if (argp3 == NULL) {
    _swig_gopanic("Attempt to dereference null std::shared_ptr< vk::CommandBuffer >");
  }
  arg3 = (std::shared_ptr< vk::CommandBuffer >)*argp3;
  
  
  argp4 = (std::vector< std::shared_ptr< kp::Tensor > > *)_swig_go_3;
  if (argp4 == NULL) {
    _swig_gopanic("Attempt to dereference null std::vector< std::shared_ptr< kp::Tensor > >");
  }
  arg4 = (std::vector< std::shared_ptr< kp::Tensor > >)*argp4;
  
  
  result = (kp::OpTensorCreate *)new kp::OpTensorCreate(arg1,arg2,arg3,arg4);
  *(kp::OpTensorCreate **)&_swig_go_result = (kp::OpTensorCreate *)result; 
  return _swig_go_result;
}


void _wrap_delete_OpTensorCreate_kompute_209ca5717ea3ce19(kp::OpTensorCreate *_swig_go_0) {
  kp::OpTensorCreate *arg1 = (kp::OpTensorCreate *) 0 ;
  
  arg1 = *(kp::OpTensorCreate **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_OpTensorCreate_init_kompute_209ca5717ea3ce19(kp::OpTensorCreate *_swig_go_0) {
  kp::OpTensorCreate *arg1 = (kp::OpTensorCreate *) 0 ;
  
  arg1 = *(kp::OpTensorCreate **)&_swig_go_0; 
  
  (arg1)->init();
  
}


void _wrap_OpTensorCreate_record_kompute_209ca5717ea3ce19(kp::OpTensorCreate *_swig_go_0) {
  kp::OpTensorCreate *arg1 = (kp::OpTensorCreate *) 0 ;
  
  arg1 = *(kp::OpTensorCreate **)&_swig_go_0; 
  
  (arg1)->record();
  
}


void _wrap_OpTensorCreate_preEval_kompute_209ca5717ea3ce19(kp::OpTensorCreate *_swig_go_0) {
  kp::OpTensorCreate *arg1 = (kp::OpTensorCreate *) 0 ;
  
  arg1 = *(kp::OpTensorCreate **)&_swig_go_0; 
  
  (arg1)->preEval();
  
}


void _wrap_OpTensorCreate_postEval_kompute_209ca5717ea3ce19(kp::OpTensorCreate *_swig_go_0) {
  kp::OpTensorCreate *arg1 = (kp::OpTensorCreate *) 0 ;
  
  arg1 = *(kp::OpTensorCreate **)&_swig_go_0; 
  
  (arg1)->postEval();
  
}


kp::Manager *_wrap_new_Manager__SWIG_0_kompute_209ca5717ea3ce19() {
  kp::Manager *result = 0 ;
  kp::Manager *_swig_go_result;
  
  
  result = (kp::Manager *)new kp::Manager();
  *(kp::Manager **)&_swig_go_result = (kp::Manager *)result; 
  return _swig_go_result;
}


kp::Manager *_wrap_new_Manager__SWIG_1_kompute_209ca5717ea3ce19(uint32_t *_swig_go_0, std::vector< uint32_t > *_swig_go_1) {
  uint32_t arg1 ;
  std::vector< uint32_t > *arg2 = 0 ;
  uint32_t *argp1 ;
  kp::Manager *result = 0 ;
  kp::Manager *_swig_go_result;
  
  
  argp1 = (uint32_t *)_swig_go_0;
  if (argp1 == NULL) {
    _swig_gopanic("Attempt to dereference null uint32_t");
  }
  arg1 = (uint32_t)*argp1;
  
  arg2 = *(std::vector< uint32_t > **)&_swig_go_1; 
  
  result = (kp::Manager *)new kp::Manager(arg1,(std::vector< uint32_t > const &)*arg2);
  *(kp::Manager **)&_swig_go_result = (kp::Manager *)result; 
  return _swig_go_result;
}


kp::Manager *_wrap_new_Manager__SWIG_2_kompute_209ca5717ea3ce19(uint32_t *_swig_go_0) {
  uint32_t arg1 ;
  uint32_t *argp1 ;
  kp::Manager *result = 0 ;
  kp::Manager *_swig_go_result;
  
  
  argp1 = (uint32_t *)_swig_go_0;
  if (argp1 == NULL) {
    _swig_gopanic("Attempt to dereference null uint32_t");
  }
  arg1 = (uint32_t)*argp1;
  
  
  result = (kp::Manager *)new kp::Manager(arg1);
  *(kp::Manager **)&_swig_go_result = (kp::Manager *)result; 
  return _swig_go_result;
}


kp::Manager *_wrap_new_Manager__SWIG_3_kompute_209ca5717ea3ce19(std::shared_ptr< vk::Instance > *_swig_go_0, std::shared_ptr< vk::PhysicalDevice > *_swig_go_1, std::shared_ptr< vk::Device > *_swig_go_2, uint32_t *_swig_go_3) {
  std::shared_ptr< vk::Instance > arg1 ;
  std::shared_ptr< vk::PhysicalDevice > arg2 ;
  std::shared_ptr< vk::Device > arg3 ;
  uint32_t arg4 ;
  std::shared_ptr< vk::Instance > *argp1 ;
  std::shared_ptr< vk::PhysicalDevice > *argp2 ;
  std::shared_ptr< vk::Device > *argp3 ;
  uint32_t *argp4 ;
  kp::Manager *result = 0 ;
  kp::Manager *_swig_go_result;
  
  
  argp1 = (std::shared_ptr< vk::Instance > *)_swig_go_0;
  if (argp1 == NULL) {
    _swig_gopanic("Attempt to dereference null std::shared_ptr< vk::Instance >");
  }
  arg1 = (std::shared_ptr< vk::Instance >)*argp1;
  
  
  argp2 = (std::shared_ptr< vk::PhysicalDevice > *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null std::shared_ptr< vk::PhysicalDevice >");
  }
  arg2 = (std::shared_ptr< vk::PhysicalDevice >)*argp2;
  
  
  argp3 = (std::shared_ptr< vk::Device > *)_swig_go_2;
  if (argp3 == NULL) {
    _swig_gopanic("Attempt to dereference null std::shared_ptr< vk::Device >");
  }
  arg3 = (std::shared_ptr< vk::Device >)*argp3;
  
  
  argp4 = (uint32_t *)_swig_go_3;
  if (argp4 == NULL) {
    _swig_gopanic("Attempt to dereference null uint32_t");
  }
  arg4 = (uint32_t)*argp4;
  
  
  result = (kp::Manager *)new kp::Manager(arg1,arg2,arg3,arg4);
  *(kp::Manager **)&_swig_go_result = (kp::Manager *)result; 
  return _swig_go_result;
}


void _wrap_delete_Manager_kompute_209ca5717ea3ce19(kp::Manager *_swig_go_0) {
  kp::Manager *arg1 = (kp::Manager *) 0 ;
  
  arg1 = *(kp::Manager **)&_swig_go_0; 
  
  delete arg1;
  
}


std::shared_ptr< kp::Sequence > *_wrap_Manager_getOrCreateManagedSequence_kompute_209ca5717ea3ce19(kp::Manager *_swig_go_0, _gostring_ _swig_go_1) {
  kp::Manager *arg1 = (kp::Manager *) 0 ;
  std::string arg2 ;
  SwigValueWrapper< std::shared_ptr< kp::Sequence > > result;
  std::shared_ptr< kp::Sequence > *_swig_go_result;
  
  arg1 = *(kp::Manager **)&_swig_go_0; 
  (&arg2)->assign(_swig_go_1.p, _swig_go_1.n); 
  
  result = (arg1)->getOrCreateManagedSequence(arg2);
  *(std::shared_ptr< kp::Sequence > **)&_swig_go_result = new std::shared_ptr< kp::Sequence >(result); 
  return _swig_go_result;
}


std::shared_ptr< kp::Sequence > *_wrap_Manager_createManagedSequence__SWIG_0_kompute_209ca5717ea3ce19(kp::Manager *_swig_go_0, _gostring_ _swig_go_1, uint32_t *_swig_go_2) {
  kp::Manager *arg1 = (kp::Manager *) 0 ;
  std::string arg2 ;
  uint32_t arg3 ;
  uint32_t *argp3 ;
  SwigValueWrapper< std::shared_ptr< kp::Sequence > > result;
  std::shared_ptr< kp::Sequence > *_swig_go_result;
  
  arg1 = *(kp::Manager **)&_swig_go_0; 
  (&arg2)->assign(_swig_go_1.p, _swig_go_1.n); 
  
  argp3 = (uint32_t *)_swig_go_2;
  if (argp3 == NULL) {
    _swig_gopanic("Attempt to dereference null uint32_t");
  }
  arg3 = (uint32_t)*argp3;
  
  
  result = (arg1)->createManagedSequence(arg2,arg3);
  *(std::shared_ptr< kp::Sequence > **)&_swig_go_result = new std::shared_ptr< kp::Sequence >(result); 
  return _swig_go_result;
}


std::shared_ptr< kp::Sequence > *_wrap_Manager_createManagedSequence__SWIG_1_kompute_209ca5717ea3ce19(kp::Manager *_swig_go_0, _gostring_ _swig_go_1) {
  kp::Manager *arg1 = (kp::Manager *) 0 ;
  std::string arg2 ;
  SwigValueWrapper< std::shared_ptr< kp::Sequence > > result;
  std::shared_ptr< kp::Sequence > *_swig_go_result;
  
  arg1 = *(kp::Manager **)&_swig_go_0; 
  (&arg2)->assign(_swig_go_1.p, _swig_go_1.n); 
  
  result = (arg1)->createManagedSequence(arg2);
  *(std::shared_ptr< kp::Sequence > **)&_swig_go_result = new std::shared_ptr< kp::Sequence >(result); 
  return _swig_go_result;
}


std::shared_ptr< kp::Sequence > *_wrap_Manager_createManagedSequence__SWIG_2_kompute_209ca5717ea3ce19(kp::Manager *_swig_go_0) {
  kp::Manager *arg1 = (kp::Manager *) 0 ;
  SwigValueWrapper< std::shared_ptr< kp::Sequence > > result;
  std::shared_ptr< kp::Sequence > *_swig_go_result;
  
  arg1 = *(kp::Manager **)&_swig_go_0; 
  
  result = (arg1)->createManagedSequence();
  *(std::shared_ptr< kp::Sequence > **)&_swig_go_result = new std::shared_ptr< kp::Sequence >(result); 
  return _swig_go_result;
}


void _wrap_Manager_evalOpAwait__SWIG_0_kompute_209ca5717ea3ce19(kp::Manager *_swig_go_0, _gostring_ _swig_go_1, uint64_t *_swig_go_2) {
  kp::Manager *arg1 = (kp::Manager *) 0 ;
  std::string arg2 ;
  uint64_t arg3 ;
  uint64_t *argp3 ;
  
  arg1 = *(kp::Manager **)&_swig_go_0; 
  (&arg2)->assign(_swig_go_1.p, _swig_go_1.n); 
  
  argp3 = (uint64_t *)_swig_go_2;
  if (argp3 == NULL) {
    _swig_gopanic("Attempt to dereference null uint64_t");
  }
  arg3 = (uint64_t)*argp3;
  
  
  (arg1)->evalOpAwait(arg2,arg3);
  
}


void _wrap_Manager_evalOpAwait__SWIG_1_kompute_209ca5717ea3ce19(kp::Manager *_swig_go_0, _gostring_ _swig_go_1) {
  kp::Manager *arg1 = (kp::Manager *) 0 ;
  std::string arg2 ;
  
  arg1 = *(kp::Manager **)&_swig_go_0; 
  (&arg2)->assign(_swig_go_1.p, _swig_go_1.n); 
  
  (arg1)->evalOpAwait(arg2);
  
}


void _wrap_Manager_evalOpAwaitDefault__SWIG_0_kompute_209ca5717ea3ce19(kp::Manager *_swig_go_0, uint64_t *_swig_go_1) {
  kp::Manager *arg1 = (kp::Manager *) 0 ;
  uint64_t arg2 ;
  uint64_t *argp2 ;
  
  arg1 = *(kp::Manager **)&_swig_go_0; 
  
  argp2 = (uint64_t *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null uint64_t");
  }
  arg2 = (uint64_t)*argp2;
  
  
  (arg1)->evalOpAwaitDefault(arg2);
  
}


void _wrap_Manager_evalOpAwaitDefault__SWIG_1_kompute_209ca5717ea3ce19(kp::Manager *_swig_go_0) {
  kp::Manager *arg1 = (kp::Manager *) 0 ;
  
  arg1 = *(kp::Manager **)&_swig_go_0; 
  
  (arg1)->evalOpAwaitDefault();
  
}


std::shared_ptr< kp::Tensor > *_wrap_Manager_buildTensor__SWIG_0_kompute_209ca5717ea3ce19(kp::Manager *_swig_go_0, std::vector< float > *_swig_go_1, intgo _swig_go_2) {
  kp::Manager *arg1 = (kp::Manager *) 0 ;
  std::vector< float > *arg2 = 0 ;
  kp::Tensor::TensorTypes arg3 ;
  SwigValueWrapper< std::shared_ptr< kp::Tensor > > result;
  std::shared_ptr< kp::Tensor > *_swig_go_result;
  
  arg1 = *(kp::Manager **)&_swig_go_0; 
  arg2 = *(std::vector< float > **)&_swig_go_1; 
  arg3 = (kp::Tensor::TensorTypes)_swig_go_2; 
  
  result = (arg1)->buildTensor((std::vector< float > const &)*arg2,arg3);
  *(std::shared_ptr< kp::Tensor > **)&_swig_go_result = new std::shared_ptr< kp::Tensor >(result); 
  return _swig_go_result;
}


std::shared_ptr< kp::Tensor > *_wrap_Manager_buildTensor__SWIG_1_kompute_209ca5717ea3ce19(kp::Manager *_swig_go_0, std::vector< float > *_swig_go_1) {
  kp::Manager *arg1 = (kp::Manager *) 0 ;
  std::vector< float > *arg2 = 0 ;
  SwigValueWrapper< std::shared_ptr< kp::Tensor > > result;
  std::shared_ptr< kp::Tensor > *_swig_go_result;
  
  arg1 = *(kp::Manager **)&_swig_go_0; 
  arg2 = *(std::vector< float > **)&_swig_go_1; 
  
  result = (arg1)->buildTensor((std::vector< float > const &)*arg2);
  *(std::shared_ptr< kp::Tensor > **)&_swig_go_result = new std::shared_ptr< kp::Tensor >(result); 
  return _swig_go_result;
}


kp::Algorithm *_wrap_new_Algorithm__SWIG_0_kompute_209ca5717ea3ce19() {
  kp::Algorithm *result = 0 ;
  kp::Algorithm *_swig_go_result;
  
  
  result = (kp::Algorithm *)new kp::Algorithm();
  *(kp::Algorithm **)&_swig_go_result = (kp::Algorithm *)result; 
  return _swig_go_result;
}


kp::Algorithm *_wrap_new_Algorithm__SWIG_1_kompute_209ca5717ea3ce19(std::shared_ptr< vk::Device > *_swig_go_0, std::shared_ptr< vk::CommandBuffer > *_swig_go_1) {
  std::shared_ptr< vk::Device > arg1 ;
  std::shared_ptr< vk::CommandBuffer > arg2 ;
  std::shared_ptr< vk::Device > *argp1 ;
  std::shared_ptr< vk::CommandBuffer > *argp2 ;
  kp::Algorithm *result = 0 ;
  kp::Algorithm *_swig_go_result;
  
  
  argp1 = (std::shared_ptr< vk::Device > *)_swig_go_0;
  if (argp1 == NULL) {
    _swig_gopanic("Attempt to dereference null std::shared_ptr< vk::Device >");
  }
  arg1 = (std::shared_ptr< vk::Device >)*argp1;
  
  
  argp2 = (std::shared_ptr< vk::CommandBuffer > *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null std::shared_ptr< vk::CommandBuffer >");
  }
  arg2 = (std::shared_ptr< vk::CommandBuffer >)*argp2;
  
  
  result = (kp::Algorithm *)new kp::Algorithm(arg1,arg2);
  *(kp::Algorithm **)&_swig_go_result = (kp::Algorithm *)result; 
  return _swig_go_result;
}


void _wrap_Algorithm_init_kompute_209ca5717ea3ce19(kp::Algorithm *_swig_go_0, std::vector< char > *_swig_go_1, std::vector< std::shared_ptr< kp::Tensor > > *_swig_go_2) {
  kp::Algorithm *arg1 = (kp::Algorithm *) 0 ;
  std::vector< char > *arg2 = 0 ;
  SwigValueWrapper< std::vector< std::shared_ptr< kp::Tensor > > > arg3 ;
  std::vector< std::shared_ptr< kp::Tensor > > *argp3 ;
  
  arg1 = *(kp::Algorithm **)&_swig_go_0; 
  arg2 = *(std::vector< char > **)&_swig_go_1; 
  
  argp3 = (std::vector< std::shared_ptr< kp::Tensor > > *)_swig_go_2;
  if (argp3 == NULL) {
    _swig_gopanic("Attempt to dereference null std::vector< std::shared_ptr< kp::Tensor > >");
  }
  arg3 = (std::vector< std::shared_ptr< kp::Tensor > >)*argp3;
  
  
  (arg1)->init((std::vector< char > const &)*arg2,arg3);
  
}


void _wrap_delete_Algorithm_kompute_209ca5717ea3ce19(kp::Algorithm *_swig_go_0) {
  kp::Algorithm *arg1 = (kp::Algorithm *) 0 ;
  
  arg1 = *(kp::Algorithm **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_Algorithm_recordDispatch__SWIG_0_kompute_209ca5717ea3ce19(kp::Algorithm *_swig_go_0, uint32_t *_swig_go_1, uint32_t *_swig_go_2, uint32_t *_swig_go_3) {
  kp::Algorithm *arg1 = (kp::Algorithm *) 0 ;
  uint32_t arg2 ;
  uint32_t arg3 ;
  uint32_t arg4 ;
  uint32_t *argp2 ;
  uint32_t *argp3 ;
  uint32_t *argp4 ;
  
  arg1 = *(kp::Algorithm **)&_swig_go_0; 
  
  argp2 = (uint32_t *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null uint32_t");
  }
  arg2 = (uint32_t)*argp2;
  
  
  argp3 = (uint32_t *)_swig_go_2;
  if (argp3 == NULL) {
    _swig_gopanic("Attempt to dereference null uint32_t");
  }
  arg3 = (uint32_t)*argp3;
  
  
  argp4 = (uint32_t *)_swig_go_3;
  if (argp4 == NULL) {
    _swig_gopanic("Attempt to dereference null uint32_t");
  }
  arg4 = (uint32_t)*argp4;
  
  
  (arg1)->recordDispatch(arg2,arg3,arg4);
  
}


void _wrap_Algorithm_recordDispatch__SWIG_1_kompute_209ca5717ea3ce19(kp::Algorithm *_swig_go_0, uint32_t *_swig_go_1, uint32_t *_swig_go_2) {
  kp::Algorithm *arg1 = (kp::Algorithm *) 0 ;
  uint32_t arg2 ;
  uint32_t arg3 ;
  uint32_t *argp2 ;
  uint32_t *argp3 ;
  
  arg1 = *(kp::Algorithm **)&_swig_go_0; 
  
  argp2 = (uint32_t *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null uint32_t");
  }
  arg2 = (uint32_t)*argp2;
  
  
  argp3 = (uint32_t *)_swig_go_2;
  if (argp3 == NULL) {
    _swig_gopanic("Attempt to dereference null uint32_t");
  }
  arg3 = (uint32_t)*argp3;
  
  
  (arg1)->recordDispatch(arg2,arg3);
  
}


void _wrap_Algorithm_recordDispatch__SWIG_2_kompute_209ca5717ea3ce19(kp::Algorithm *_swig_go_0, uint32_t *_swig_go_1) {
  kp::Algorithm *arg1 = (kp::Algorithm *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  arg1 = *(kp::Algorithm **)&_swig_go_0; 
  
  argp2 = (uint32_t *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null uint32_t");
  }
  arg2 = (uint32_t)*argp2;
  
  
  (arg1)->recordDispatch(arg2);
  
}


void _wrap_Algorithm_recordDispatch__SWIG_3_kompute_209ca5717ea3ce19(kp::Algorithm *_swig_go_0) {
  kp::Algorithm *arg1 = (kp::Algorithm *) 0 ;
  
  arg1 = *(kp::Algorithm **)&_swig_go_0; 
  
  (arg1)->recordDispatch();
  
}


kp::OpAlgoBase *_wrap_new_OpAlgoBase__SWIG_0_kompute_209ca5717ea3ce19() {
  kp::OpAlgoBase *result = 0 ;
  kp::OpAlgoBase *_swig_go_result;
  
  
  result = (kp::OpAlgoBase *)new kp::OpAlgoBase();
  *(kp::OpAlgoBase **)&_swig_go_result = (kp::OpAlgoBase *)result; 
  return _swig_go_result;
}


kp::OpAlgoBase *_wrap_new_OpAlgoBase__SWIG_1_kompute_209ca5717ea3ce19(std::shared_ptr< vk::PhysicalDevice > *_swig_go_0, std::shared_ptr< vk::Device > *_swig_go_1, std::shared_ptr< vk::CommandBuffer > *_swig_go_2, std::vector< std::shared_ptr< kp::Tensor > > *_swig_go_3, kp::OpAlgoBase::KomputeWorkgroup *_swig_go_4) {
  std::shared_ptr< vk::PhysicalDevice > arg1 ;
  std::shared_ptr< vk::Device > arg2 ;
  std::shared_ptr< vk::CommandBuffer > arg3 ;
  std::vector< std::shared_ptr< kp::Tensor > > *arg4 = 0 ;
  kp::OpAlgoBase::KomputeWorkgroup arg5 ;
  std::shared_ptr< vk::PhysicalDevice > *argp1 ;
  std::shared_ptr< vk::Device > *argp2 ;
  std::shared_ptr< vk::CommandBuffer > *argp3 ;
  kp::OpAlgoBase::KomputeWorkgroup *argp5 ;
  kp::OpAlgoBase *result = 0 ;
  kp::OpAlgoBase *_swig_go_result;
  
  
  argp1 = (std::shared_ptr< vk::PhysicalDevice > *)_swig_go_0;
  if (argp1 == NULL) {
    _swig_gopanic("Attempt to dereference null std::shared_ptr< vk::PhysicalDevice >");
  }
  arg1 = (std::shared_ptr< vk::PhysicalDevice >)*argp1;
  
  
  argp2 = (std::shared_ptr< vk::Device > *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null std::shared_ptr< vk::Device >");
  }
  arg2 = (std::shared_ptr< vk::Device >)*argp2;
  
  
  argp3 = (std::shared_ptr< vk::CommandBuffer > *)_swig_go_2;
  if (argp3 == NULL) {
    _swig_gopanic("Attempt to dereference null std::shared_ptr< vk::CommandBuffer >");
  }
  arg3 = (std::shared_ptr< vk::CommandBuffer >)*argp3;
  
  arg4 = *(std::vector< std::shared_ptr< kp::Tensor > > **)&_swig_go_3; 
  
  argp5 = (kp::OpAlgoBase::KomputeWorkgroup *)_swig_go_4;
  if (argp5 == NULL) {
    _swig_gopanic("Attempt to dereference null kp::OpAlgoBase::KomputeWorkgroup");
  }
  arg5 = (kp::OpAlgoBase::KomputeWorkgroup)*argp5;
  
  
  result = (kp::OpAlgoBase *)new kp::OpAlgoBase(arg1,arg2,arg3,*arg4,arg5);
  *(kp::OpAlgoBase **)&_swig_go_result = (kp::OpAlgoBase *)result; 
  return _swig_go_result;
}


kp::OpAlgoBase *_wrap_new_OpAlgoBase__SWIG_2_kompute_209ca5717ea3ce19(std::shared_ptr< vk::PhysicalDevice > *_swig_go_0, std::shared_ptr< vk::Device > *_swig_go_1, std::shared_ptr< vk::CommandBuffer > *_swig_go_2, std::vector< std::shared_ptr< kp::Tensor > > *_swig_go_3) {
  std::shared_ptr< vk::PhysicalDevice > arg1 ;
  std::shared_ptr< vk::Device > arg2 ;
  std::shared_ptr< vk::CommandBuffer > arg3 ;
  std::vector< std::shared_ptr< kp::Tensor > > *arg4 = 0 ;
  std::shared_ptr< vk::PhysicalDevice > *argp1 ;
  std::shared_ptr< vk::Device > *argp2 ;
  std::shared_ptr< vk::CommandBuffer > *argp3 ;
  kp::OpAlgoBase *result = 0 ;
  kp::OpAlgoBase *_swig_go_result;
  
  
  argp1 = (std::shared_ptr< vk::PhysicalDevice > *)_swig_go_0;
  if (argp1 == NULL) {
    _swig_gopanic("Attempt to dereference null std::shared_ptr< vk::PhysicalDevice >");
  }
  arg1 = (std::shared_ptr< vk::PhysicalDevice >)*argp1;
  
  
  argp2 = (std::shared_ptr< vk::Device > *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null std::shared_ptr< vk::Device >");
  }
  arg2 = (std::shared_ptr< vk::Device >)*argp2;
  
  
  argp3 = (std::shared_ptr< vk::CommandBuffer > *)_swig_go_2;
  if (argp3 == NULL) {
    _swig_gopanic("Attempt to dereference null std::shared_ptr< vk::CommandBuffer >");
  }
  arg3 = (std::shared_ptr< vk::CommandBuffer >)*argp3;
  
  arg4 = *(std::vector< std::shared_ptr< kp::Tensor > > **)&_swig_go_3; 
  
  result = (kp::OpAlgoBase *)new kp::OpAlgoBase(arg1,arg2,arg3,*arg4);
  *(kp::OpAlgoBase **)&_swig_go_result = (kp::OpAlgoBase *)result; 
  return _swig_go_result;
}


kp::OpAlgoBase *_wrap_new_OpAlgoBase__SWIG_3_kompute_209ca5717ea3ce19(std::shared_ptr< vk::PhysicalDevice > *_swig_go_0, std::shared_ptr< vk::Device > *_swig_go_1, std::shared_ptr< vk::CommandBuffer > *_swig_go_2, std::vector< std::shared_ptr< kp::Tensor > > *_swig_go_3, _gostring_ _swig_go_4, kp::OpAlgoBase::KomputeWorkgroup *_swig_go_5) {
  std::shared_ptr< vk::PhysicalDevice > arg1 ;
  std::shared_ptr< vk::Device > arg2 ;
  std::shared_ptr< vk::CommandBuffer > arg3 ;
  std::vector< std::shared_ptr< kp::Tensor > > *arg4 = 0 ;
  std::string arg5 ;
  kp::OpAlgoBase::KomputeWorkgroup arg6 ;
  std::shared_ptr< vk::PhysicalDevice > *argp1 ;
  std::shared_ptr< vk::Device > *argp2 ;
  std::shared_ptr< vk::CommandBuffer > *argp3 ;
  kp::OpAlgoBase::KomputeWorkgroup *argp6 ;
  kp::OpAlgoBase *result = 0 ;
  kp::OpAlgoBase *_swig_go_result;
  
  
  argp1 = (std::shared_ptr< vk::PhysicalDevice > *)_swig_go_0;
  if (argp1 == NULL) {
    _swig_gopanic("Attempt to dereference null std::shared_ptr< vk::PhysicalDevice >");
  }
  arg1 = (std::shared_ptr< vk::PhysicalDevice >)*argp1;
  
  
  argp2 = (std::shared_ptr< vk::Device > *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null std::shared_ptr< vk::Device >");
  }
  arg2 = (std::shared_ptr< vk::Device >)*argp2;
  
  
  argp3 = (std::shared_ptr< vk::CommandBuffer > *)_swig_go_2;
  if (argp3 == NULL) {
    _swig_gopanic("Attempt to dereference null std::shared_ptr< vk::CommandBuffer >");
  }
  arg3 = (std::shared_ptr< vk::CommandBuffer >)*argp3;
  
  arg4 = *(std::vector< std::shared_ptr< kp::Tensor > > **)&_swig_go_3; 
  (&arg5)->assign(_swig_go_4.p, _swig_go_4.n); 
  
  argp6 = (kp::OpAlgoBase::KomputeWorkgroup *)_swig_go_5;
  if (argp6 == NULL) {
    _swig_gopanic("Attempt to dereference null kp::OpAlgoBase::KomputeWorkgroup");
  }
  arg6 = (kp::OpAlgoBase::KomputeWorkgroup)*argp6;
  
  
  result = (kp::OpAlgoBase *)new kp::OpAlgoBase(arg1,arg2,arg3,*arg4,arg5,arg6);
  *(kp::OpAlgoBase **)&_swig_go_result = (kp::OpAlgoBase *)result; 
  return _swig_go_result;
}


kp::OpAlgoBase *_wrap_new_OpAlgoBase__SWIG_4_kompute_209ca5717ea3ce19(std::shared_ptr< vk::PhysicalDevice > *_swig_go_0, std::shared_ptr< vk::Device > *_swig_go_1, std::shared_ptr< vk::CommandBuffer > *_swig_go_2, std::vector< std::shared_ptr< kp::Tensor > > *_swig_go_3, _gostring_ _swig_go_4) {
  std::shared_ptr< vk::PhysicalDevice > arg1 ;
  std::shared_ptr< vk::Device > arg2 ;
  std::shared_ptr< vk::CommandBuffer > arg3 ;
  std::vector< std::shared_ptr< kp::Tensor > > *arg4 = 0 ;
  std::string arg5 ;
  std::shared_ptr< vk::PhysicalDevice > *argp1 ;
  std::shared_ptr< vk::Device > *argp2 ;
  std::shared_ptr< vk::CommandBuffer > *argp3 ;
  kp::OpAlgoBase *result = 0 ;
  kp::OpAlgoBase *_swig_go_result;
  
  
  argp1 = (std::shared_ptr< vk::PhysicalDevice > *)_swig_go_0;
  if (argp1 == NULL) {
    _swig_gopanic("Attempt to dereference null std::shared_ptr< vk::PhysicalDevice >");
  }
  arg1 = (std::shared_ptr< vk::PhysicalDevice >)*argp1;
  
  
  argp2 = (std::shared_ptr< vk::Device > *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null std::shared_ptr< vk::Device >");
  }
  arg2 = (std::shared_ptr< vk::Device >)*argp2;
  
  
  argp3 = (std::shared_ptr< vk::CommandBuffer > *)_swig_go_2;
  if (argp3 == NULL) {
    _swig_gopanic("Attempt to dereference null std::shared_ptr< vk::CommandBuffer >");
  }
  arg3 = (std::shared_ptr< vk::CommandBuffer >)*argp3;
  
  arg4 = *(std::vector< std::shared_ptr< kp::Tensor > > **)&_swig_go_3; 
  (&arg5)->assign(_swig_go_4.p, _swig_go_4.n); 
  
  result = (kp::OpAlgoBase *)new kp::OpAlgoBase(arg1,arg2,arg3,*arg4,arg5);
  *(kp::OpAlgoBase **)&_swig_go_result = (kp::OpAlgoBase *)result; 
  return _swig_go_result;
}


kp::OpAlgoBase *_wrap_new_OpAlgoBase__SWIG_5_kompute_209ca5717ea3ce19(std::shared_ptr< vk::PhysicalDevice > *_swig_go_0, std::shared_ptr< vk::Device > *_swig_go_1, std::shared_ptr< vk::CommandBuffer > *_swig_go_2, std::vector< std::shared_ptr< kp::Tensor > > *_swig_go_3, std::vector< char > *_swig_go_4, kp::OpAlgoBase::KomputeWorkgroup *_swig_go_5) {
  std::shared_ptr< vk::PhysicalDevice > arg1 ;
  std::shared_ptr< vk::Device > arg2 ;
  std::shared_ptr< vk::CommandBuffer > arg3 ;
  std::vector< std::shared_ptr< kp::Tensor > > *arg4 = 0 ;
  std::vector< char > *arg5 = 0 ;
  kp::OpAlgoBase::KomputeWorkgroup arg6 ;
  std::shared_ptr< vk::PhysicalDevice > *argp1 ;
  std::shared_ptr< vk::Device > *argp2 ;
  std::shared_ptr< vk::CommandBuffer > *argp3 ;
  kp::OpAlgoBase::KomputeWorkgroup *argp6 ;
  kp::OpAlgoBase *result = 0 ;
  kp::OpAlgoBase *_swig_go_result;
  
  
  argp1 = (std::shared_ptr< vk::PhysicalDevice > *)_swig_go_0;
  if (argp1 == NULL) {
    _swig_gopanic("Attempt to dereference null std::shared_ptr< vk::PhysicalDevice >");
  }
  arg1 = (std::shared_ptr< vk::PhysicalDevice >)*argp1;
  
  
  argp2 = (std::shared_ptr< vk::Device > *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null std::shared_ptr< vk::Device >");
  }
  arg2 = (std::shared_ptr< vk::Device >)*argp2;
  
  
  argp3 = (std::shared_ptr< vk::CommandBuffer > *)_swig_go_2;
  if (argp3 == NULL) {
    _swig_gopanic("Attempt to dereference null std::shared_ptr< vk::CommandBuffer >");
  }
  arg3 = (std::shared_ptr< vk::CommandBuffer >)*argp3;
  
  arg4 = *(std::vector< std::shared_ptr< kp::Tensor > > **)&_swig_go_3; 
  arg5 = *(std::vector< char > **)&_swig_go_4; 
  
  argp6 = (kp::OpAlgoBase::KomputeWorkgroup *)_swig_go_5;
  if (argp6 == NULL) {
    _swig_gopanic("Attempt to dereference null kp::OpAlgoBase::KomputeWorkgroup");
  }
  arg6 = (kp::OpAlgoBase::KomputeWorkgroup)*argp6;
  
  
  result = (kp::OpAlgoBase *)new kp::OpAlgoBase(arg1,arg2,arg3,*arg4,(std::vector< char > const &)*arg5,arg6);
  *(kp::OpAlgoBase **)&_swig_go_result = (kp::OpAlgoBase *)result; 
  return _swig_go_result;
}


kp::OpAlgoBase *_wrap_new_OpAlgoBase__SWIG_6_kompute_209ca5717ea3ce19(std::shared_ptr< vk::PhysicalDevice > *_swig_go_0, std::shared_ptr< vk::Device > *_swig_go_1, std::shared_ptr< vk::CommandBuffer > *_swig_go_2, std::vector< std::shared_ptr< kp::Tensor > > *_swig_go_3, std::vector< char > *_swig_go_4) {
  std::shared_ptr< vk::PhysicalDevice > arg1 ;
  std::shared_ptr< vk::Device > arg2 ;
  std::shared_ptr< vk::CommandBuffer > arg3 ;
  std::vector< std::shared_ptr< kp::Tensor > > *arg4 = 0 ;
  std::vector< char > *arg5 = 0 ;
  std::shared_ptr< vk::PhysicalDevice > *argp1 ;
  std::shared_ptr< vk::Device > *argp2 ;
  std::shared_ptr< vk::CommandBuffer > *argp3 ;
  kp::OpAlgoBase *result = 0 ;
  kp::OpAlgoBase *_swig_go_result;
  
  
  argp1 = (std::shared_ptr< vk::PhysicalDevice > *)_swig_go_0;
  if (argp1 == NULL) {
    _swig_gopanic("Attempt to dereference null std::shared_ptr< vk::PhysicalDevice >");
  }
  arg1 = (std::shared_ptr< vk::PhysicalDevice >)*argp1;
  
  
  argp2 = (std::shared_ptr< vk::Device > *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null std::shared_ptr< vk::Device >");
  }
  arg2 = (std::shared_ptr< vk::Device >)*argp2;
  
  
  argp3 = (std::shared_ptr< vk::CommandBuffer > *)_swig_go_2;
  if (argp3 == NULL) {
    _swig_gopanic("Attempt to dereference null std::shared_ptr< vk::CommandBuffer >");
  }
  arg3 = (std::shared_ptr< vk::CommandBuffer >)*argp3;
  
  arg4 = *(std::vector< std::shared_ptr< kp::Tensor > > **)&_swig_go_3; 
  arg5 = *(std::vector< char > **)&_swig_go_4; 
  
  result = (kp::OpAlgoBase *)new kp::OpAlgoBase(arg1,arg2,arg3,*arg4,(std::vector< char > const &)*arg5);
  *(kp::OpAlgoBase **)&_swig_go_result = (kp::OpAlgoBase *)result; 
  return _swig_go_result;
}


void _wrap_delete_OpAlgoBase_kompute_209ca5717ea3ce19(kp::OpAlgoBase *_swig_go_0) {
  kp::OpAlgoBase *arg1 = (kp::OpAlgoBase *) 0 ;
  
  arg1 = *(kp::OpAlgoBase **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_OpAlgoBase_init_kompute_209ca5717ea3ce19(kp::OpAlgoBase *_swig_go_0) {
  kp::OpAlgoBase *arg1 = (kp::OpAlgoBase *) 0 ;
  
  arg1 = *(kp::OpAlgoBase **)&_swig_go_0; 
  
  (arg1)->init();
  
}


void _wrap_OpAlgoBase_record_kompute_209ca5717ea3ce19(kp::OpAlgoBase *_swig_go_0) {
  kp::OpAlgoBase *arg1 = (kp::OpAlgoBase *) 0 ;
  
  arg1 = *(kp::OpAlgoBase **)&_swig_go_0; 
  
  (arg1)->record();
  
}


void _wrap_OpAlgoBase_preEval_kompute_209ca5717ea3ce19(kp::OpAlgoBase *_swig_go_0) {
  kp::OpAlgoBase *arg1 = (kp::OpAlgoBase *) 0 ;
  
  arg1 = *(kp::OpAlgoBase **)&_swig_go_0; 
  
  (arg1)->preEval();
  
}


void _wrap_OpAlgoBase_postEval_kompute_209ca5717ea3ce19(kp::OpAlgoBase *_swig_go_0) {
  kp::OpAlgoBase *arg1 = (kp::OpAlgoBase *) 0 ;
  
  arg1 = *(kp::OpAlgoBase **)&_swig_go_0; 
  
  (arg1)->postEval();
  
}


kp::OpAlgoLhsRhsOut *_wrap_new_OpAlgoLhsRhsOut__SWIG_0_kompute_209ca5717ea3ce19() {
  kp::OpAlgoLhsRhsOut *result = 0 ;
  kp::OpAlgoLhsRhsOut *_swig_go_result;
  
  
  result = (kp::OpAlgoLhsRhsOut *)new kp::OpAlgoLhsRhsOut();
  *(kp::OpAlgoLhsRhsOut **)&_swig_go_result = (kp::OpAlgoLhsRhsOut *)result; 
  return _swig_go_result;
}


kp::OpAlgoLhsRhsOut *_wrap_new_OpAlgoLhsRhsOut__SWIG_1_kompute_209ca5717ea3ce19(std::shared_ptr< vk::PhysicalDevice > *_swig_go_0, std::shared_ptr< vk::Device > *_swig_go_1, std::shared_ptr< vk::CommandBuffer > *_swig_go_2, std::vector< std::shared_ptr< kp::Tensor > > *_swig_go_3, kp::OpAlgoBase::KomputeWorkgroup *_swig_go_4) {
  std::shared_ptr< vk::PhysicalDevice > arg1 ;
  std::shared_ptr< vk::Device > arg2 ;
  std::shared_ptr< vk::CommandBuffer > arg3 ;
  SwigValueWrapper< std::vector< std::shared_ptr< kp::Tensor > > > arg4 ;
  kp::OpAlgoBase::KomputeWorkgroup arg5 ;
  std::shared_ptr< vk::PhysicalDevice > *argp1 ;
  std::shared_ptr< vk::Device > *argp2 ;
  std::shared_ptr< vk::CommandBuffer > *argp3 ;
  std::vector< std::shared_ptr< kp::Tensor > > *argp4 ;
  kp::OpAlgoBase::KomputeWorkgroup *argp5 ;
  kp::OpAlgoLhsRhsOut *result = 0 ;
  kp::OpAlgoLhsRhsOut *_swig_go_result;
  
  
  argp1 = (std::shared_ptr< vk::PhysicalDevice > *)_swig_go_0;
  if (argp1 == NULL) {
    _swig_gopanic("Attempt to dereference null std::shared_ptr< vk::PhysicalDevice >");
  }
  arg1 = (std::shared_ptr< vk::PhysicalDevice >)*argp1;
  
  
  argp2 = (std::shared_ptr< vk::Device > *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null std::shared_ptr< vk::Device >");
  }
  arg2 = (std::shared_ptr< vk::Device >)*argp2;
  
  
  argp3 = (std::shared_ptr< vk::CommandBuffer > *)_swig_go_2;
  if (argp3 == NULL) {
    _swig_gopanic("Attempt to dereference null std::shared_ptr< vk::CommandBuffer >");
  }
  arg3 = (std::shared_ptr< vk::CommandBuffer >)*argp3;
  
  
  argp4 = (std::vector< std::shared_ptr< kp::Tensor > > *)_swig_go_3;
  if (argp4 == NULL) {
    _swig_gopanic("Attempt to dereference null std::vector< std::shared_ptr< kp::Tensor > >");
  }
  arg4 = (std::vector< std::shared_ptr< kp::Tensor > >)*argp4;
  
  
  argp5 = (kp::OpAlgoBase::KomputeWorkgroup *)_swig_go_4;
  if (argp5 == NULL) {
    _swig_gopanic("Attempt to dereference null kp::OpAlgoBase::KomputeWorkgroup");
  }
  arg5 = (kp::OpAlgoBase::KomputeWorkgroup)*argp5;
  
  
  result = (kp::OpAlgoLhsRhsOut *)new kp::OpAlgoLhsRhsOut(arg1,arg2,arg3,arg4,arg5);
  *(kp::OpAlgoLhsRhsOut **)&_swig_go_result = (kp::OpAlgoLhsRhsOut *)result; 
  return _swig_go_result;
}


kp::OpAlgoLhsRhsOut *_wrap_new_OpAlgoLhsRhsOut__SWIG_2_kompute_209ca5717ea3ce19(std::shared_ptr< vk::PhysicalDevice > *_swig_go_0, std::shared_ptr< vk::Device > *_swig_go_1, std::shared_ptr< vk::CommandBuffer > *_swig_go_2, std::vector< std::shared_ptr< kp::Tensor > > *_swig_go_3) {
  std::shared_ptr< vk::PhysicalDevice > arg1 ;
  std::shared_ptr< vk::Device > arg2 ;
  std::shared_ptr< vk::CommandBuffer > arg3 ;
  SwigValueWrapper< std::vector< std::shared_ptr< kp::Tensor > > > arg4 ;
  std::shared_ptr< vk::PhysicalDevice > *argp1 ;
  std::shared_ptr< vk::Device > *argp2 ;
  std::shared_ptr< vk::CommandBuffer > *argp3 ;
  std::vector< std::shared_ptr< kp::Tensor > > *argp4 ;
  kp::OpAlgoLhsRhsOut *result = 0 ;
  kp::OpAlgoLhsRhsOut *_swig_go_result;
  
  
  argp1 = (std::shared_ptr< vk::PhysicalDevice > *)_swig_go_0;
  if (argp1 == NULL) {
    _swig_gopanic("Attempt to dereference null std::shared_ptr< vk::PhysicalDevice >");
  }
  arg1 = (std::shared_ptr< vk::PhysicalDevice >)*argp1;
  
  
  argp2 = (std::shared_ptr< vk::Device > *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null std::shared_ptr< vk::Device >");
  }
  arg2 = (std::shared_ptr< vk::Device >)*argp2;
  
  
  argp3 = (std::shared_ptr< vk::CommandBuffer > *)_swig_go_2;
  if (argp3 == NULL) {
    _swig_gopanic("Attempt to dereference null std::shared_ptr< vk::CommandBuffer >");
  }
  arg3 = (std::shared_ptr< vk::CommandBuffer >)*argp3;
  
  
  argp4 = (std::vector< std::shared_ptr< kp::Tensor > > *)_swig_go_3;
  if (argp4 == NULL) {
    _swig_gopanic("Attempt to dereference null std::vector< std::shared_ptr< kp::Tensor > >");
  }
  arg4 = (std::vector< std::shared_ptr< kp::Tensor > >)*argp4;
  
  
  result = (kp::OpAlgoLhsRhsOut *)new kp::OpAlgoLhsRhsOut(arg1,arg2,arg3,arg4);
  *(kp::OpAlgoLhsRhsOut **)&_swig_go_result = (kp::OpAlgoLhsRhsOut *)result; 
  return _swig_go_result;
}


void _wrap_delete_OpAlgoLhsRhsOut_kompute_209ca5717ea3ce19(kp::OpAlgoLhsRhsOut *_swig_go_0) {
  kp::OpAlgoLhsRhsOut *arg1 = (kp::OpAlgoLhsRhsOut *) 0 ;
  
  arg1 = *(kp::OpAlgoLhsRhsOut **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_OpAlgoLhsRhsOut_init_kompute_209ca5717ea3ce19(kp::OpAlgoLhsRhsOut *_swig_go_0) {
  kp::OpAlgoLhsRhsOut *arg1 = (kp::OpAlgoLhsRhsOut *) 0 ;
  
  arg1 = *(kp::OpAlgoLhsRhsOut **)&_swig_go_0; 
  
  (arg1)->init();
  
}


void _wrap_OpAlgoLhsRhsOut_record_kompute_209ca5717ea3ce19(kp::OpAlgoLhsRhsOut *_swig_go_0) {
  kp::OpAlgoLhsRhsOut *arg1 = (kp::OpAlgoLhsRhsOut *) 0 ;
  
  arg1 = *(kp::OpAlgoLhsRhsOut **)&_swig_go_0; 
  
  (arg1)->record();
  
}


void _wrap_OpAlgoLhsRhsOut_postEval_kompute_209ca5717ea3ce19(kp::OpAlgoLhsRhsOut *_swig_go_0) {
  kp::OpAlgoLhsRhsOut *arg1 = (kp::OpAlgoLhsRhsOut *) 0 ;
  
  arg1 = *(kp::OpAlgoLhsRhsOut **)&_swig_go_0; 
  
  (arg1)->postEval();
  
}


void _wrap_OpAlgoLhsRhsOut_preEval_kompute_209ca5717ea3ce19(kp::OpAlgoLhsRhsOut *_swig_go_0) {
  kp::OpAlgoLhsRhsOut *arg1 = (kp::OpAlgoLhsRhsOut *) 0 ;
  
  arg1 = *(kp::OpAlgoLhsRhsOut **)&_swig_go_0; 
  
  kp::OpAlgoBase *swig_b0 = (kp::OpAlgoBase *)arg1;
  (swig_b0)->preEval();
  
}


kp::OpMult *_wrap_new_OpMult__SWIG_0_kompute_209ca5717ea3ce19() {
  kp::OpMult *result = 0 ;
  kp::OpMult *_swig_go_result;
  
  
  result = (kp::OpMult *)new kp::OpMult();
  *(kp::OpMult **)&_swig_go_result = (kp::OpMult *)result; 
  return _swig_go_result;
}


kp::OpMult *_wrap_new_OpMult__SWIG_1_kompute_209ca5717ea3ce19(std::shared_ptr< vk::PhysicalDevice > *_swig_go_0, std::shared_ptr< vk::Device > *_swig_go_1, std::shared_ptr< vk::CommandBuffer > *_swig_go_2, std::vector< std::shared_ptr< kp::Tensor > > *_swig_go_3, kp::OpAlgoBase::KomputeWorkgroup *_swig_go_4) {
  std::shared_ptr< vk::PhysicalDevice > arg1 ;
  std::shared_ptr< vk::Device > arg2 ;
  std::shared_ptr< vk::CommandBuffer > arg3 ;
  SwigValueWrapper< std::vector< std::shared_ptr< kp::Tensor > > > arg4 ;
  kp::OpAlgoBase::KomputeWorkgroup arg5 ;
  std::shared_ptr< vk::PhysicalDevice > *argp1 ;
  std::shared_ptr< vk::Device > *argp2 ;
  std::shared_ptr< vk::CommandBuffer > *argp3 ;
  std::vector< std::shared_ptr< kp::Tensor > > *argp4 ;
  kp::OpAlgoBase::KomputeWorkgroup *argp5 ;
  kp::OpMult *result = 0 ;
  kp::OpMult *_swig_go_result;
  
  
  argp1 = (std::shared_ptr< vk::PhysicalDevice > *)_swig_go_0;
  if (argp1 == NULL) {
    _swig_gopanic("Attempt to dereference null std::shared_ptr< vk::PhysicalDevice >");
  }
  arg1 = (std::shared_ptr< vk::PhysicalDevice >)*argp1;
  
  
  argp2 = (std::shared_ptr< vk::Device > *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null std::shared_ptr< vk::Device >");
  }
  arg2 = (std::shared_ptr< vk::Device >)*argp2;
  
  
  argp3 = (std::shared_ptr< vk::CommandBuffer > *)_swig_go_2;
  if (argp3 == NULL) {
    _swig_gopanic("Attempt to dereference null std::shared_ptr< vk::CommandBuffer >");
  }
  arg3 = (std::shared_ptr< vk::CommandBuffer >)*argp3;
  
  
  argp4 = (std::vector< std::shared_ptr< kp::Tensor > > *)_swig_go_3;
  if (argp4 == NULL) {
    _swig_gopanic("Attempt to dereference null std::vector< std::shared_ptr< kp::Tensor > >");
  }
  arg4 = (std::vector< std::shared_ptr< kp::Tensor > >)*argp4;
  
  
  argp5 = (kp::OpAlgoBase::KomputeWorkgroup *)_swig_go_4;
  if (argp5 == NULL) {
    _swig_gopanic("Attempt to dereference null kp::OpAlgoBase::KomputeWorkgroup");
  }
  arg5 = (kp::OpAlgoBase::KomputeWorkgroup)*argp5;
  
  
  result = (kp::OpMult *)new kp::OpMult(arg1,arg2,arg3,arg4,arg5);
  *(kp::OpMult **)&_swig_go_result = (kp::OpMult *)result; 
  return _swig_go_result;
}


kp::OpMult *_wrap_new_OpMult__SWIG_2_kompute_209ca5717ea3ce19(std::shared_ptr< vk::PhysicalDevice > *_swig_go_0, std::shared_ptr< vk::Device > *_swig_go_1, std::shared_ptr< vk::CommandBuffer > *_swig_go_2, std::vector< std::shared_ptr< kp::Tensor > > *_swig_go_3) {
  std::shared_ptr< vk::PhysicalDevice > arg1 ;
  std::shared_ptr< vk::Device > arg2 ;
  std::shared_ptr< vk::CommandBuffer > arg3 ;
  SwigValueWrapper< std::vector< std::shared_ptr< kp::Tensor > > > arg4 ;
  std::shared_ptr< vk::PhysicalDevice > *argp1 ;
  std::shared_ptr< vk::Device > *argp2 ;
  std::shared_ptr< vk::CommandBuffer > *argp3 ;
  std::vector< std::shared_ptr< kp::Tensor > > *argp4 ;
  kp::OpMult *result = 0 ;
  kp::OpMult *_swig_go_result;
  
  
  argp1 = (std::shared_ptr< vk::PhysicalDevice > *)_swig_go_0;
  if (argp1 == NULL) {
    _swig_gopanic("Attempt to dereference null std::shared_ptr< vk::PhysicalDevice >");
  }
  arg1 = (std::shared_ptr< vk::PhysicalDevice >)*argp1;
  
  
  argp2 = (std::shared_ptr< vk::Device > *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null std::shared_ptr< vk::Device >");
  }
  arg2 = (std::shared_ptr< vk::Device >)*argp2;
  
  
  argp3 = (std::shared_ptr< vk::CommandBuffer > *)_swig_go_2;
  if (argp3 == NULL) {
    _swig_gopanic("Attempt to dereference null std::shared_ptr< vk::CommandBuffer >");
  }
  arg3 = (std::shared_ptr< vk::CommandBuffer >)*argp3;
  
  
  argp4 = (std::vector< std::shared_ptr< kp::Tensor > > *)_swig_go_3;
  if (argp4 == NULL) {
    _swig_gopanic("Attempt to dereference null std::vector< std::shared_ptr< kp::Tensor > >");
  }
  arg4 = (std::vector< std::shared_ptr< kp::Tensor > >)*argp4;
  
  
  result = (kp::OpMult *)new kp::OpMult(arg1,arg2,arg3,arg4);
  *(kp::OpMult **)&_swig_go_result = (kp::OpMult *)result; 
  return _swig_go_result;
}


void _wrap_delete_OpMult_kompute_209ca5717ea3ce19(kp::OpMult *_swig_go_0) {
  kp::OpMult *arg1 = (kp::OpMult *) 0 ;
  
  arg1 = *(kp::OpMult **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_OpMult_init_kompute_209ca5717ea3ce19(kp::OpMult *_swig_go_0) {
  kp::OpMult *arg1 = (kp::OpMult *) 0 ;
  
  arg1 = *(kp::OpMult **)&_swig_go_0; 
  
  kp::OpAlgoBase *swig_b0 = (kp::OpAlgoBase *)arg1;
  (swig_b0)->init();
  
}


void _wrap_OpMult_record_kompute_209ca5717ea3ce19(kp::OpMult *_swig_go_0) {
  kp::OpMult *arg1 = (kp::OpMult *) 0 ;
  
  arg1 = *(kp::OpMult **)&_swig_go_0; 
  
  kp::OpAlgoBase *swig_b0 = (kp::OpAlgoBase *)arg1;
  (swig_b0)->record();
  
}


void _wrap_OpMult_preEval_kompute_209ca5717ea3ce19(kp::OpMult *_swig_go_0) {
  kp::OpMult *arg1 = (kp::OpMult *) 0 ;
  
  arg1 = *(kp::OpMult **)&_swig_go_0; 
  
  kp::OpAlgoBase *swig_b0 = (kp::OpAlgoBase *)arg1;
  (swig_b0)->preEval();
  
}


void _wrap_OpMult_postEval_kompute_209ca5717ea3ce19(kp::OpMult *_swig_go_0) {
  kp::OpMult *arg1 = (kp::OpMult *) 0 ;
  
  arg1 = *(kp::OpMult **)&_swig_go_0; 
  
  kp::OpAlgoBase *swig_b0 = (kp::OpAlgoBase *)arg1;
  (swig_b0)->postEval();
  
}


kp::OpTensorCopy *_wrap_new_OpTensorCopy__SWIG_0_kompute_209ca5717ea3ce19() {
  kp::OpTensorCopy *result = 0 ;
  kp::OpTensorCopy *_swig_go_result;
  
  
  result = (kp::OpTensorCopy *)new kp::OpTensorCopy();
  *(kp::OpTensorCopy **)&_swig_go_result = (kp::OpTensorCopy *)result; 
  return _swig_go_result;
}


kp::OpTensorCopy *_wrap_new_OpTensorCopy__SWIG_1_kompute_209ca5717ea3ce19(std::shared_ptr< vk::PhysicalDevice > *_swig_go_0, std::shared_ptr< vk::Device > *_swig_go_1, std::shared_ptr< vk::CommandBuffer > *_swig_go_2, std::vector< std::shared_ptr< kp::Tensor > > *_swig_go_3) {
  std::shared_ptr< vk::PhysicalDevice > arg1 ;
  std::shared_ptr< vk::Device > arg2 ;
  std::shared_ptr< vk::CommandBuffer > arg3 ;
  SwigValueWrapper< std::vector< std::shared_ptr< kp::Tensor > > > arg4 ;
  std::shared_ptr< vk::PhysicalDevice > *argp1 ;
  std::shared_ptr< vk::Device > *argp2 ;
  std::shared_ptr< vk::CommandBuffer > *argp3 ;
  std::vector< std::shared_ptr< kp::Tensor > > *argp4 ;
  kp::OpTensorCopy *result = 0 ;
  kp::OpTensorCopy *_swig_go_result;
  
  
  argp1 = (std::shared_ptr< vk::PhysicalDevice > *)_swig_go_0;
  if (argp1 == NULL) {
    _swig_gopanic("Attempt to dereference null std::shared_ptr< vk::PhysicalDevice >");
  }
  arg1 = (std::shared_ptr< vk::PhysicalDevice >)*argp1;
  
  
  argp2 = (std::shared_ptr< vk::Device > *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null std::shared_ptr< vk::Device >");
  }
  arg2 = (std::shared_ptr< vk::Device >)*argp2;
  
  
  argp3 = (std::shared_ptr< vk::CommandBuffer > *)_swig_go_2;
  if (argp3 == NULL) {
    _swig_gopanic("Attempt to dereference null std::shared_ptr< vk::CommandBuffer >");
  }
  arg3 = (std::shared_ptr< vk::CommandBuffer >)*argp3;
  
  
  argp4 = (std::vector< std::shared_ptr< kp::Tensor > > *)_swig_go_3;
  if (argp4 == NULL) {
    _swig_gopanic("Attempt to dereference null std::vector< std::shared_ptr< kp::Tensor > >");
  }
  arg4 = (std::vector< std::shared_ptr< kp::Tensor > >)*argp4;
  
  
  result = (kp::OpTensorCopy *)new kp::OpTensorCopy(arg1,arg2,arg3,arg4);
  *(kp::OpTensorCopy **)&_swig_go_result = (kp::OpTensorCopy *)result; 
  return _swig_go_result;
}


void _wrap_delete_OpTensorCopy_kompute_209ca5717ea3ce19(kp::OpTensorCopy *_swig_go_0) {
  kp::OpTensorCopy *arg1 = (kp::OpTensorCopy *) 0 ;
  
  arg1 = *(kp::OpTensorCopy **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_OpTensorCopy_init_kompute_209ca5717ea3ce19(kp::OpTensorCopy *_swig_go_0) {
  kp::OpTensorCopy *arg1 = (kp::OpTensorCopy *) 0 ;
  
  arg1 = *(kp::OpTensorCopy **)&_swig_go_0; 
  
  (arg1)->init();
  
}


void _wrap_OpTensorCopy_record_kompute_209ca5717ea3ce19(kp::OpTensorCopy *_swig_go_0) {
  kp::OpTensorCopy *arg1 = (kp::OpTensorCopy *) 0 ;
  
  arg1 = *(kp::OpTensorCopy **)&_swig_go_0; 
  
  (arg1)->record();
  
}


void _wrap_OpTensorCopy_preEval_kompute_209ca5717ea3ce19(kp::OpTensorCopy *_swig_go_0) {
  kp::OpTensorCopy *arg1 = (kp::OpTensorCopy *) 0 ;
  
  arg1 = *(kp::OpTensorCopy **)&_swig_go_0; 
  
  (arg1)->preEval();
  
}


void _wrap_OpTensorCopy_postEval_kompute_209ca5717ea3ce19(kp::OpTensorCopy *_swig_go_0) {
  kp::OpTensorCopy *arg1 = (kp::OpTensorCopy *) 0 ;
  
  arg1 = *(kp::OpTensorCopy **)&_swig_go_0; 
  
  (arg1)->postEval();
  
}


kp::OpTensorSyncDevice *_wrap_new_OpTensorSyncDevice__SWIG_0_kompute_209ca5717ea3ce19() {
  kp::OpTensorSyncDevice *result = 0 ;
  kp::OpTensorSyncDevice *_swig_go_result;
  
  
  result = (kp::OpTensorSyncDevice *)new kp::OpTensorSyncDevice();
  *(kp::OpTensorSyncDevice **)&_swig_go_result = (kp::OpTensorSyncDevice *)result; 
  return _swig_go_result;
}


kp::OpTensorSyncDevice *_wrap_new_OpTensorSyncDevice__SWIG_1_kompute_209ca5717ea3ce19(std::shared_ptr< vk::PhysicalDevice > *_swig_go_0, std::shared_ptr< vk::Device > *_swig_go_1, std::shared_ptr< vk::CommandBuffer > *_swig_go_2, std::vector< std::shared_ptr< kp::Tensor > > *_swig_go_3) {
  std::shared_ptr< vk::PhysicalDevice > arg1 ;
  std::shared_ptr< vk::Device > arg2 ;
  std::shared_ptr< vk::CommandBuffer > arg3 ;
  SwigValueWrapper< std::vector< std::shared_ptr< kp::Tensor > > > arg4 ;
  std::shared_ptr< vk::PhysicalDevice > *argp1 ;
  std::shared_ptr< vk::Device > *argp2 ;
  std::shared_ptr< vk::CommandBuffer > *argp3 ;
  std::vector< std::shared_ptr< kp::Tensor > > *argp4 ;
  kp::OpTensorSyncDevice *result = 0 ;
  kp::OpTensorSyncDevice *_swig_go_result;
  
  
  argp1 = (std::shared_ptr< vk::PhysicalDevice > *)_swig_go_0;
  if (argp1 == NULL) {
    _swig_gopanic("Attempt to dereference null std::shared_ptr< vk::PhysicalDevice >");
  }
  arg1 = (std::shared_ptr< vk::PhysicalDevice >)*argp1;
  
  
  argp2 = (std::shared_ptr< vk::Device > *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null std::shared_ptr< vk::Device >");
  }
  arg2 = (std::shared_ptr< vk::Device >)*argp2;
  
  
  argp3 = (std::shared_ptr< vk::CommandBuffer > *)_swig_go_2;
  if (argp3 == NULL) {
    _swig_gopanic("Attempt to dereference null std::shared_ptr< vk::CommandBuffer >");
  }
  arg3 = (std::shared_ptr< vk::CommandBuffer >)*argp3;
  
  
  argp4 = (std::vector< std::shared_ptr< kp::Tensor > > *)_swig_go_3;
  if (argp4 == NULL) {
    _swig_gopanic("Attempt to dereference null std::vector< std::shared_ptr< kp::Tensor > >");
  }
  arg4 = (std::vector< std::shared_ptr< kp::Tensor > >)*argp4;
  
  
  result = (kp::OpTensorSyncDevice *)new kp::OpTensorSyncDevice(arg1,arg2,arg3,arg4);
  *(kp::OpTensorSyncDevice **)&_swig_go_result = (kp::OpTensorSyncDevice *)result; 
  return _swig_go_result;
}


void _wrap_delete_OpTensorSyncDevice_kompute_209ca5717ea3ce19(kp::OpTensorSyncDevice *_swig_go_0) {
  kp::OpTensorSyncDevice *arg1 = (kp::OpTensorSyncDevice *) 0 ;
  
  arg1 = *(kp::OpTensorSyncDevice **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_OpTensorSyncDevice_init_kompute_209ca5717ea3ce19(kp::OpTensorSyncDevice *_swig_go_0) {
  kp::OpTensorSyncDevice *arg1 = (kp::OpTensorSyncDevice *) 0 ;
  
  arg1 = *(kp::OpTensorSyncDevice **)&_swig_go_0; 
  
  (arg1)->init();
  
}


void _wrap_OpTensorSyncDevice_record_kompute_209ca5717ea3ce19(kp::OpTensorSyncDevice *_swig_go_0) {
  kp::OpTensorSyncDevice *arg1 = (kp::OpTensorSyncDevice *) 0 ;
  
  arg1 = *(kp::OpTensorSyncDevice **)&_swig_go_0; 
  
  (arg1)->record();
  
}


void _wrap_OpTensorSyncDevice_preEval_kompute_209ca5717ea3ce19(kp::OpTensorSyncDevice *_swig_go_0) {
  kp::OpTensorSyncDevice *arg1 = (kp::OpTensorSyncDevice *) 0 ;
  
  arg1 = *(kp::OpTensorSyncDevice **)&_swig_go_0; 
  
  (arg1)->preEval();
  
}


void _wrap_OpTensorSyncDevice_postEval_kompute_209ca5717ea3ce19(kp::OpTensorSyncDevice *_swig_go_0) {
  kp::OpTensorSyncDevice *arg1 = (kp::OpTensorSyncDevice *) 0 ;
  
  arg1 = *(kp::OpTensorSyncDevice **)&_swig_go_0; 
  
  (arg1)->postEval();
  
}


kp::OpTensorSyncLocal *_wrap_new_OpTensorSyncLocal__SWIG_0_kompute_209ca5717ea3ce19() {
  kp::OpTensorSyncLocal *result = 0 ;
  kp::OpTensorSyncLocal *_swig_go_result;
  
  
  result = (kp::OpTensorSyncLocal *)new kp::OpTensorSyncLocal();
  *(kp::OpTensorSyncLocal **)&_swig_go_result = (kp::OpTensorSyncLocal *)result; 
  return _swig_go_result;
}


kp::OpTensorSyncLocal *_wrap_new_OpTensorSyncLocal__SWIG_1_kompute_209ca5717ea3ce19(std::shared_ptr< vk::PhysicalDevice > *_swig_go_0, std::shared_ptr< vk::Device > *_swig_go_1, std::shared_ptr< vk::CommandBuffer > *_swig_go_2, std::vector< std::shared_ptr< kp::Tensor > > *_swig_go_3) {
  std::shared_ptr< vk::PhysicalDevice > arg1 ;
  std::shared_ptr< vk::Device > arg2 ;
  std::shared_ptr< vk::CommandBuffer > arg3 ;
  SwigValueWrapper< std::vector< std::shared_ptr< kp::Tensor > > > arg4 ;
  std::shared_ptr< vk::PhysicalDevice > *argp1 ;
  std::shared_ptr< vk::Device > *argp2 ;
  std::shared_ptr< vk::CommandBuffer > *argp3 ;
  std::vector< std::shared_ptr< kp::Tensor > > *argp4 ;
  kp::OpTensorSyncLocal *result = 0 ;
  kp::OpTensorSyncLocal *_swig_go_result;
  
  
  argp1 = (std::shared_ptr< vk::PhysicalDevice > *)_swig_go_0;
  if (argp1 == NULL) {
    _swig_gopanic("Attempt to dereference null std::shared_ptr< vk::PhysicalDevice >");
  }
  arg1 = (std::shared_ptr< vk::PhysicalDevice >)*argp1;
  
  
  argp2 = (std::shared_ptr< vk::Device > *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null std::shared_ptr< vk::Device >");
  }
  arg2 = (std::shared_ptr< vk::Device >)*argp2;
  
  
  argp3 = (std::shared_ptr< vk::CommandBuffer > *)_swig_go_2;
  if (argp3 == NULL) {
    _swig_gopanic("Attempt to dereference null std::shared_ptr< vk::CommandBuffer >");
  }
  arg3 = (std::shared_ptr< vk::CommandBuffer >)*argp3;
  
  
  argp4 = (std::vector< std::shared_ptr< kp::Tensor > > *)_swig_go_3;
  if (argp4 == NULL) {
    _swig_gopanic("Attempt to dereference null std::vector< std::shared_ptr< kp::Tensor > >");
  }
  arg4 = (std::vector< std::shared_ptr< kp::Tensor > >)*argp4;
  
  
  result = (kp::OpTensorSyncLocal *)new kp::OpTensorSyncLocal(arg1,arg2,arg3,arg4);
  *(kp::OpTensorSyncLocal **)&_swig_go_result = (kp::OpTensorSyncLocal *)result; 
  return _swig_go_result;
}


void _wrap_delete_OpTensorSyncLocal_kompute_209ca5717ea3ce19(kp::OpTensorSyncLocal *_swig_go_0) {
  kp::OpTensorSyncLocal *arg1 = (kp::OpTensorSyncLocal *) 0 ;
  
  arg1 = *(kp::OpTensorSyncLocal **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_OpTensorSyncLocal_init_kompute_209ca5717ea3ce19(kp::OpTensorSyncLocal *_swig_go_0) {
  kp::OpTensorSyncLocal *arg1 = (kp::OpTensorSyncLocal *) 0 ;
  
  arg1 = *(kp::OpTensorSyncLocal **)&_swig_go_0; 
  
  (arg1)->init();
  
}


void _wrap_OpTensorSyncLocal_record_kompute_209ca5717ea3ce19(kp::OpTensorSyncLocal *_swig_go_0) {
  kp::OpTensorSyncLocal *arg1 = (kp::OpTensorSyncLocal *) 0 ;
  
  arg1 = *(kp::OpTensorSyncLocal **)&_swig_go_0; 
  
  (arg1)->record();
  
}


void _wrap_OpTensorSyncLocal_preEval_kompute_209ca5717ea3ce19(kp::OpTensorSyncLocal *_swig_go_0) {
  kp::OpTensorSyncLocal *arg1 = (kp::OpTensorSyncLocal *) 0 ;
  
  arg1 = *(kp::OpTensorSyncLocal **)&_swig_go_0; 
  
  (arg1)->preEval();
  
}


void _wrap_OpTensorSyncLocal_postEval_kompute_209ca5717ea3ce19(kp::OpTensorSyncLocal *_swig_go_0) {
  kp::OpTensorSyncLocal *arg1 = (kp::OpTensorSyncLocal *) 0 ;
  
  arg1 = *(kp::OpTensorSyncLocal **)&_swig_go_0; 
  
  (arg1)->postEval();
  
}


#ifdef __cplusplus
}
#endif

